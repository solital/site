{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"You are reading the version documentation: 2.x Requirements PHP 7.4 or PHP ^8.0 PHP JSON extension enabled PHP PDO extension enabled Features Basic routing (GET, POST, PUT, PATCH, UPDATE, DELETE) with support for custom multiple verbs. Regular Expression Constraints for parameters. Wolf template system. HTTP client manipulation. Vinci Console. Middleware (classes that intercepts before the route is rendered). ORM for database persistence. CSRF protection. Sub-domain routing Custom boot managers to rewrite urls to \"nicer\" ones. Input manager; easily manage GET, POST and FILE values. PSR-3, PSR-11 and PSR-16.","title":"Starting"},{"location":"#requirements","text":"PHP 7.4 or PHP ^8.0 PHP JSON extension enabled PHP PDO extension enabled","title":"Requirements"},{"location":"#features","text":"Basic routing (GET, POST, PUT, PATCH, UPDATE, DELETE) with support for custom multiple verbs. Regular Expression Constraints for parameters. Wolf template system. HTTP client manipulation. Vinci Console. Middleware (classes that intercepts before the route is rendered). ORM for database persistence. CSRF protection. Sub-domain routing Custom boot managers to rewrite urls to \"nicer\" ones. Input manager; easily manage GET, POST and FILE values. PSR-3, PSR-11 and PSR-16.","title":"Features"},{"location":"auth/","text":"At first, you have the option to change the index where Solital will store the login in the .env file. INDEX_LOGIN='solital_index_login' Setting For this, it is necessary to first define the name of the table in the login method. In the columns method, the database username and password. Then, in the values method, the input values of the form. Finally, the register method will perform the login as shown below. $res = Auth::login('tb_auth') ->columns('username', 'password') ->values('inputEmail', 'inputPassword') ->register(); The $res variable will return true if authentication is true. But if it is false , you can add a reply message after the above code if authentication fails. if ($res == false) { $this->message->new('login', 'Invalid username and/or password!'); response()->redirect('your_login_url'); } Below is an example method of authentication. <?php namespace Solital\\Components\\Controller; use Solital\\Components\\Controller\\Controller; use Solital\\Core\\Auth\\Auth; class UserController extends Controller { /** * @return void */ public function authPost(): void { $res = Auth::login('tb_auth') ->columns('username', 'password') ->values('inputEmail', 'inputPassword') ->register(); if ($res == false) { $this->message->new('login', 'Invalid username and/or password!'); response()->redirect(url('auth')); } } } Standard login and dashboard In some cases, your project may have more than one type of login such as e-commerce or multiple logins. Obviously, it is necessary to have several different login and dashboard routes. You can define these routes for each Controller using the Auth::defineUrl() method, passing the login route in the first parameter, and the dashboard route in the second. If this method is not declared, the /auth and /dashboard routes will be used by default. Remember, always declare this method in the class's constructor. /** * Construct */ public function __construct() { Auth::defineUrl('/custom-login', '/custom-dashboard'); } Check login To ensure that the user is authenticated, use the Auth::isNotLogged() method. If the login has not been validated, the user will be redirected to the route defined in the Auth::defineUrl() method or to the /login route. The example below shows the method together with the Wolf model. Auth::isNotLogged() Wolf::loadView('home'); To ensure that the user doesn't fall into the login route when it has already been validated, insert the Auth::isLogged() method in your login route. This method will redirect the user to your system's dashboard. Auth::isLogged(); Wolf::loadView('login'); Log off To log off, use the Auth::logoff() method. /** * @return void */ public function exit(): void { Auth::logoff(); } Standard login structure To create a predefined login structure, use php vinci auth This command will create a LoginController class, templates for authentication, dashboard and predefined routes. Plus a standard user in the database. To learn more visit this link . If you want to remove this structure, use php vinci remove-auth . Authentication using Sodium encryption You can create an authentication using Sodium encryption. Generating a sodium key First, you need to generate a sodium key. This key is automatically renewed with each new request, so it can be stored in a database, in the session or in another type of storage. use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey(); Encrypting the password Use Auth::sodium() to encrypt your password. Remember to use it in conjunction with the generated key. use Solital\\Core\\Auth\\Auth; use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey(); $encoded = Auth::sodium('password', $key); pre($encoded); Verifying the password with Sodium To verify the password generated using the Auth::sodium() method, use Auth::sodiumVerify() together with the generated key, password and hash. use Solital\\Core\\Auth\\Auth; use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey(); $encoded = Auth::sodium('password', $key); $decoded = Auth::sodiumVerify($encoded, 'password', $key); pre($decoded);","title":"Authenticate"},{"location":"auth/#setting","text":"For this, it is necessary to first define the name of the table in the login method. In the columns method, the database username and password. Then, in the values method, the input values of the form. Finally, the register method will perform the login as shown below. $res = Auth::login('tb_auth') ->columns('username', 'password') ->values('inputEmail', 'inputPassword') ->register(); The $res variable will return true if authentication is true. But if it is false , you can add a reply message after the above code if authentication fails. if ($res == false) { $this->message->new('login', 'Invalid username and/or password!'); response()->redirect('your_login_url'); } Below is an example method of authentication. <?php namespace Solital\\Components\\Controller; use Solital\\Components\\Controller\\Controller; use Solital\\Core\\Auth\\Auth; class UserController extends Controller { /** * @return void */ public function authPost(): void { $res = Auth::login('tb_auth') ->columns('username', 'password') ->values('inputEmail', 'inputPassword') ->register(); if ($res == false) { $this->message->new('login', 'Invalid username and/or password!'); response()->redirect(url('auth')); } } }","title":"Setting"},{"location":"auth/#standard-login-and-dashboard","text":"In some cases, your project may have more than one type of login such as e-commerce or multiple logins. Obviously, it is necessary to have several different login and dashboard routes. You can define these routes for each Controller using the Auth::defineUrl() method, passing the login route in the first parameter, and the dashboard route in the second. If this method is not declared, the /auth and /dashboard routes will be used by default. Remember, always declare this method in the class's constructor. /** * Construct */ public function __construct() { Auth::defineUrl('/custom-login', '/custom-dashboard'); }","title":"Standard login and dashboard"},{"location":"auth/#check-login","text":"To ensure that the user is authenticated, use the Auth::isNotLogged() method. If the login has not been validated, the user will be redirected to the route defined in the Auth::defineUrl() method or to the /login route. The example below shows the method together with the Wolf model. Auth::isNotLogged() Wolf::loadView('home'); To ensure that the user doesn't fall into the login route when it has already been validated, insert the Auth::isLogged() method in your login route. This method will redirect the user to your system's dashboard. Auth::isLogged(); Wolf::loadView('login');","title":"Check login"},{"location":"auth/#log-off","text":"To log off, use the Auth::logoff() method. /** * @return void */ public function exit(): void { Auth::logoff(); }","title":"Log off"},{"location":"auth/#standard-login-structure","text":"To create a predefined login structure, use php vinci auth This command will create a LoginController class, templates for authentication, dashboard and predefined routes. Plus a standard user in the database. To learn more visit this link . If you want to remove this structure, use php vinci remove-auth .","title":"Standard login structure"},{"location":"auth/#authentication-using-sodium-encryption","text":"You can create an authentication using Sodium encryption.","title":"Authentication using Sodium encryption"},{"location":"auth/#generating-a-sodium-key","text":"First, you need to generate a sodium key. This key is automatically renewed with each new request, so it can be stored in a database, in the session or in another type of storage. use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey();","title":"Generating a sodium key"},{"location":"auth/#encrypting-the-password","text":"Use Auth::sodium() to encrypt your password. Remember to use it in conjunction with the generated key. use Solital\\Core\\Auth\\Auth; use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey(); $encoded = Auth::sodium('password', $key); pre($encoded);","title":"Encrypting the password"},{"location":"auth/#verifying-the-password-with-sodium","text":"To verify the password generated using the Auth::sodium() method, use Auth::sodiumVerify() together with the generated key, password and hash. use Solital\\Core\\Auth\\Auth; use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey(); $encoded = Auth::sodium('password', $key); $decoded = Auth::sodiumVerify($encoded, 'password', $key); pre($decoded);","title":"Verifying the password with Sodium"},{"location":"cache/","text":"Cache is a layer of high-speed physical data storage that holds a subset of data, usually temporary in nature, so that future requests for that data are answered more quickly than is possible when accessing the primary storage location of data. Caching allows you to efficiently reuse previously recovered or computed data. How to use Single cache You can cache through PSR-16. To do this, perform the instance of the Cache class as follows: use Solital\\Cache\\Cache; $cache = new Cache(); $list = $this->instance()->select()->build(\"all\"); // The 'has' method checks whether the index exists if ($cache->has('list') == true) { echo '<h1>from cache</h1>'; // The 'get' method returns the cached value if it exists $cache->get('list'); } else { echo '<h1>created cache</h1>'; // The 'set' method creates the cached file $cache->set('list', $list, 20); } // Displays the original content of the $list variable echo '<h1>from original</h1>'; var_dump($list); To delete the cache that was created, use the delete method passing the cache key as a parameter. $cache->delete('list'); The has method checks whether the item key exists. If it exists, use the get method to retrieve the generated cache by passing the key value as a parameter. If it does not exist, the set method creates the cached file, passing in the first parameter the name of the key, the value that will be stored and the time (in int ) that this cached file will be valid. Mutiple cache The syntax is similar to the single cache. But the getMultiple method needs an array containing the key values as a parameter. The setMultiple method generates the cache if it does not exist, but pass as an parameter an array in which the keys will be the indexes of the array, and in the last parameter spend the time that the cache will be valid. use Solital\\Cache\\Cache; $cache = new Cache(); $list = [ 'nome' => 'Harvey Specter', 'email' => 'specter@pearsonhardman.com' ]; $list2 = [ 'nome' => 'Louis Litt', 'email' => 'liitup@pearsonhardman.com' ]; $cache->getMultiple(['list1', 'list2']); echo '<h1>created cache</h1>'; $cache->setMultiple([ 'list1' => $list, 'list2' => $list2 ], 20); echo '<h1>from original</h1>'; print_r($list); print_r($list2); In the multiple cache, use deleteMultiple by passing an array containing the cache keys to delete the cached files generated with the setMultiple method. $cache->deleteMultiple([\"list1\", \"list2\"]); Clear cache To clear the entire cache created with the Cache class, use the clear function. $cache->clear(); HTTP Cache Font by heroku The modern day developer has a wide variety of techniques and technologies available to improve application performance and end-user experience. One of the most frequently overlooked technologies is that of the HTTP cache. HTTP caching is a universally adopted specification across all modern web browsers, making its implementation in web applications simple. Appropriate use of these standards can benefit your application greatly, improving response times and reducing server load. However, incorrect caching can cause users to see out-of-date content and hard to debug issues. This article discusses the specifics of HTTP caching and in what scenarios to employ an HTTP cache header based strategy. use Solital\\Core\\Http\\HttpCache; $cache = new HttpCache(); Cache-Control The Cache-Control header is the most important header to set as it effectively \u2018switches on\u2019 caching in the browser. With this header in place, and set with a value that enables caching, the browser will cache the file for as long as specified. Without this header the browser will re-request the file on each subsequent request. public resources can be cached not only by the end-user\u2019s browser but also by any intermediate proxies that may be serving many other users as well. private resources are bypassed by intermediate proxies and can only be cached by the end-client. The value of the Cache-Control header is a composite one, indicating whether the resource is public or private while also indicating the maximum amount of time it can be cached before considered stale. The max-age value sets a timespan for how long to cache the resource (in seconds). In the first parameter it is necessary to inform public or private , and in the second parameter the timestamp value of max_age . $cache->cacheControl(\"public\", 31536000); While the Cache-Control header turns on client-side caching and sets the max-age of a resource the Expires header is used to specify a specific point in time the resource is no longer valid. Expires When accompanying the Cache-Control header, Expires simply sets a date from which the cached resource should no longer be considered valid. From this date forward the browser will request a fresh copy of the resource. Until then, the browsers local cached copy will be used: $cache->cacheControl(\"public\", 31536000); $cache->expires(); Time-based A time-based conditional request ensures that only if the requested resource has changed since the browser\u2019s copy was cached will the contents be transferred. If the cached copy is the most up-to-date then the server returns the 304 response code. To enable conditional requests the application specifies the last modified time of a resource via the Last-Modified response header. To use this condition, use the lastModified method after the cacheControl method. $cache->cacheControl(\"public\", 31536000); $cache->lastModified(); The next time the browser requests this resource it will only ask for the contents of the resource if they\u2019re unchanged since this date using the If-Modified-Since request header $cache->ifModifiedSince(); If the resource hasn\u2019t changed, the server will return with an empty body with the 304 response code. Etag The ETag (or Entity Tag) works in a similar way to the Last-Modified header except its value is a digest of the resources contents (for instance, an MD5 hash). This allows the server to identify if the cached contents of the resource are different to the most recent version. Use the eTag class parameter the value that will be cached. $cache->cacheControl(\"public\", 31536000); $cache->eTag('value'); Cache prevention Highly secure or variable resources often require no caching. For instance, anything involving a shopping cart checkout process. Unfortunately, merely omitting cache headers will not work as many modern web browsers cache items based on their own internal algorithms. In such cases it is necessary to tell the browser to explicitly to not cache items. In addition to public and private the Cache-Control header can specify no-cache and no-store which informs the browser to not cache the resources under any circumstances. $cache->noCacheControl();","title":"Cache"},{"location":"cache/#how-to-use","text":"Single cache You can cache through PSR-16. To do this, perform the instance of the Cache class as follows: use Solital\\Cache\\Cache; $cache = new Cache(); $list = $this->instance()->select()->build(\"all\"); // The 'has' method checks whether the index exists if ($cache->has('list') == true) { echo '<h1>from cache</h1>'; // The 'get' method returns the cached value if it exists $cache->get('list'); } else { echo '<h1>created cache</h1>'; // The 'set' method creates the cached file $cache->set('list', $list, 20); } // Displays the original content of the $list variable echo '<h1>from original</h1>'; var_dump($list); To delete the cache that was created, use the delete method passing the cache key as a parameter. $cache->delete('list'); The has method checks whether the item key exists. If it exists, use the get method to retrieve the generated cache by passing the key value as a parameter. If it does not exist, the set method creates the cached file, passing in the first parameter the name of the key, the value that will be stored and the time (in int ) that this cached file will be valid. Mutiple cache The syntax is similar to the single cache. But the getMultiple method needs an array containing the key values as a parameter. The setMultiple method generates the cache if it does not exist, but pass as an parameter an array in which the keys will be the indexes of the array, and in the last parameter spend the time that the cache will be valid. use Solital\\Cache\\Cache; $cache = new Cache(); $list = [ 'nome' => 'Harvey Specter', 'email' => 'specter@pearsonhardman.com' ]; $list2 = [ 'nome' => 'Louis Litt', 'email' => 'liitup@pearsonhardman.com' ]; $cache->getMultiple(['list1', 'list2']); echo '<h1>created cache</h1>'; $cache->setMultiple([ 'list1' => $list, 'list2' => $list2 ], 20); echo '<h1>from original</h1>'; print_r($list); print_r($list2); In the multiple cache, use deleteMultiple by passing an array containing the cache keys to delete the cached files generated with the setMultiple method. $cache->deleteMultiple([\"list1\", \"list2\"]);","title":"How to use"},{"location":"cache/#clear-cache","text":"To clear the entire cache created with the Cache class, use the clear function. $cache->clear();","title":"Clear cache"},{"location":"cache/#http-cache","text":"Font by heroku The modern day developer has a wide variety of techniques and technologies available to improve application performance and end-user experience. One of the most frequently overlooked technologies is that of the HTTP cache. HTTP caching is a universally adopted specification across all modern web browsers, making its implementation in web applications simple. Appropriate use of these standards can benefit your application greatly, improving response times and reducing server load. However, incorrect caching can cause users to see out-of-date content and hard to debug issues. This article discusses the specifics of HTTP caching and in what scenarios to employ an HTTP cache header based strategy. use Solital\\Core\\Http\\HttpCache; $cache = new HttpCache();","title":"HTTP Cache"},{"location":"cache/#cache-control","text":"The Cache-Control header is the most important header to set as it effectively \u2018switches on\u2019 caching in the browser. With this header in place, and set with a value that enables caching, the browser will cache the file for as long as specified. Without this header the browser will re-request the file on each subsequent request. public resources can be cached not only by the end-user\u2019s browser but also by any intermediate proxies that may be serving many other users as well. private resources are bypassed by intermediate proxies and can only be cached by the end-client. The value of the Cache-Control header is a composite one, indicating whether the resource is public or private while also indicating the maximum amount of time it can be cached before considered stale. The max-age value sets a timespan for how long to cache the resource (in seconds). In the first parameter it is necessary to inform public or private , and in the second parameter the timestamp value of max_age . $cache->cacheControl(\"public\", 31536000); While the Cache-Control header turns on client-side caching and sets the max-age of a resource the Expires header is used to specify a specific point in time the resource is no longer valid.","title":"Cache-Control"},{"location":"cache/#expires","text":"When accompanying the Cache-Control header, Expires simply sets a date from which the cached resource should no longer be considered valid. From this date forward the browser will request a fresh copy of the resource. Until then, the browsers local cached copy will be used: $cache->cacheControl(\"public\", 31536000); $cache->expires();","title":"Expires"},{"location":"cache/#time-based","text":"A time-based conditional request ensures that only if the requested resource has changed since the browser\u2019s copy was cached will the contents be transferred. If the cached copy is the most up-to-date then the server returns the 304 response code. To enable conditional requests the application specifies the last modified time of a resource via the Last-Modified response header. To use this condition, use the lastModified method after the cacheControl method. $cache->cacheControl(\"public\", 31536000); $cache->lastModified(); The next time the browser requests this resource it will only ask for the contents of the resource if they\u2019re unchanged since this date using the If-Modified-Since request header $cache->ifModifiedSince(); If the resource hasn\u2019t changed, the server will return with an empty body with the 304 response code.","title":"Time-based"},{"location":"cache/#etag","text":"The ETag (or Entity Tag) works in a similar way to the Last-Modified header except its value is a digest of the resources contents (for instance, an MD5 hash). This allows the server to identify if the cached contents of the resource are different to the most recent version. Use the eTag class parameter the value that will be cached. $cache->cacheControl(\"public\", 31536000); $cache->eTag('value');","title":"Etag"},{"location":"cache/#cache-prevention","text":"Highly secure or variable resources often require no caching. For instance, anything involving a shopping cart checkout process. Unfortunately, merely omitting cache headers will not work as many modern web browsers cache items based on their own internal algorithms. In such cases it is necessary to tell the browser to explicitly to not cache items. In addition to public and private the Cache-Control header can specify no-cache and no-store which informs the browser to not cache the resources under any circumstances. $cache->noCacheControl();","title":"Cache prevention"},{"location":"container/","text":"Introduction Injecting dependencies can become a tedious task when many classes are involved. Before injecting a dependency it needs to be instantiated. So, we don't just take care of the \"injection\", we also need to have the knowledge of what objects it needs to work. A dependency injection container (DI Container) manages and automates instantiations. We tell him how an object should be created (this is the part that touches us, our knowledge about it) and then whenever we need it, we just need to use the container to obtain it. Solital implements the PSR-11, meaning you can easily create dependency containers. By default, if your controller extends from Controller , you only need to use $this->container->get() and $this->container->set() . Otherwise, it is necessary to make the instance of the Container class. use Solital\\Core\\Course\\Container\\Container; $container = new Container(); How to use The set() method sets a dependency function for an identifier that returns the dependency. Subsequent calls to the identifier return the first returned value of the function. $id is the identifier of the entry to look for, $function is the function whose return value will be attached to the identifier on subsequent get() calls. $this->container->set($id, $function); The example below shows exactly how you should create your dependency container. # The `UserModel` instance is just an example $this->container->set('user', function() { return new UserModel(); }); Return a container To return a container, use the get() method by passing the dependency identifier as a parameter. $dep = $this->container->get('user'); # The `run` method is just an example of the fictional `UserModel` class. $res = $dep->run(); pre($res); You can check if a container exists using the has() method. Returns true if the container can return an entry for the given identifier. Otherwise, it returns false. $this->container->get('user'); $dep = $this->container->has('user'); /** Return bool */ pre($dep); has($id) returning true does not mean that get($id) will not throw an exception. However, this means that get($id) will not throw a NotFoundException . Using arguments in the constructor If you need to use any arguments in your class's constructor, you can use the third parameter of the set() method. # The `UserModel` instance is just an example $this->container->set('user', function($args) { return new UserModel($args); }, 'Brenno Duarte'); You can use arguments as an array: # The `UserModel` instance is just an example $array_args = ['arg1', 'arg2', 'arg3']; $this->container->set('user', function($args) { return new UserModel($args); }, $array_args); Example Below is an example of how the dependency container should be used: <?php namespace Solital\\Components\\Controller; use Solital\\Components\\Controller\\Controller; use Solital\\Components\\Model\\UserModel; use Solital\\Components\\Model\\ContactModel; class UserController extends Controller { /** * Construct */ public function __construct() { $this->container->set(\"user\", function() { return new UserModel(); }); } /** * @return void */ public function call1(): void { $dep = $this->container->get('user'); $dep->run(); } /** * @return void */ public function call2() { $dep = $this->container->get('user'); $dep->run(); } }","title":"Dependency Container"},{"location":"container/#introduction","text":"Injecting dependencies can become a tedious task when many classes are involved. Before injecting a dependency it needs to be instantiated. So, we don't just take care of the \"injection\", we also need to have the knowledge of what objects it needs to work. A dependency injection container (DI Container) manages and automates instantiations. We tell him how an object should be created (this is the part that touches us, our knowledge about it) and then whenever we need it, we just need to use the container to obtain it. Solital implements the PSR-11, meaning you can easily create dependency containers. By default, if your controller extends from Controller , you only need to use $this->container->get() and $this->container->set() . Otherwise, it is necessary to make the instance of the Container class. use Solital\\Core\\Course\\Container\\Container; $container = new Container();","title":"Introduction"},{"location":"container/#how-to-use","text":"The set() method sets a dependency function for an identifier that returns the dependency. Subsequent calls to the identifier return the first returned value of the function. $id is the identifier of the entry to look for, $function is the function whose return value will be attached to the identifier on subsequent get() calls. $this->container->set($id, $function); The example below shows exactly how you should create your dependency container. # The `UserModel` instance is just an example $this->container->set('user', function() { return new UserModel(); });","title":"How to use"},{"location":"container/#return-a-container","text":"To return a container, use the get() method by passing the dependency identifier as a parameter. $dep = $this->container->get('user'); # The `run` method is just an example of the fictional `UserModel` class. $res = $dep->run(); pre($res); You can check if a container exists using the has() method. Returns true if the container can return an entry for the given identifier. Otherwise, it returns false. $this->container->get('user'); $dep = $this->container->has('user'); /** Return bool */ pre($dep); has($id) returning true does not mean that get($id) will not throw an exception. However, this means that get($id) will not throw a NotFoundException .","title":"Return a container"},{"location":"container/#using-arguments-in-the-constructor","text":"If you need to use any arguments in your class's constructor, you can use the third parameter of the set() method. # The `UserModel` instance is just an example $this->container->set('user', function($args) { return new UserModel($args); }, 'Brenno Duarte'); You can use arguments as an array: # The `UserModel` instance is just an example $array_args = ['arg1', 'arg2', 'arg3']; $this->container->set('user', function($args) { return new UserModel($args); }, $array_args);","title":"Using arguments in the constructor"},{"location":"container/#example","text":"Below is an example of how the dependency container should be used: <?php namespace Solital\\Components\\Controller; use Solital\\Components\\Controller\\Controller; use Solital\\Components\\Model\\UserModel; use Solital\\Components\\Model\\ContactModel; class UserController extends Controller { /** * Construct */ public function __construct() { $this->container->set(\"user\", function() { return new UserModel(); }); } /** * @return void */ public function call1(): void { $dep = $this->container->get('user'); $dep->run(); } /** * @return void */ public function call2() { $dep = $this->container->get('user'); $dep->run(); } }","title":"Example"},{"location":"crypt/","text":"Encrypt To create an encrypted key, use the Hash class together with the static encrypt function as shown below: use Solital\\Core\\Security\\Hash; $res = Hash::encrypt('word_to_encrypt'); pre($res); You can define how long this key will be valid. It can be 1 second, 1 hour or 1 year. by default the value is +1 hour . use Solital\\Core\\Security\\Hash; $res = Hash::encrypt('word_to_encrypt', '+1 month'); pre($res); Decrypt If you want to decrypt, use the decrypt function chained with the value method. use Solital\\Core\\Security\\Hash; $res = Hash::decrypt('word_to_decrypt')->value(); pre($res); Check value If you want to check if the encrypted key is still valid, use isValid . If you want to verify that the encrypted key is still valid, use isValid . the isValid method will return true if it is still valid, and false if it is already expired use Solital\\Core\\Security\\Hash; $res = Hash::decrypt('word_to_decrypt')->isValid(); pre($res); Sodium encryption Solital supports Sodium encryption. To enable, make sure that libsodium is installed in your development environment. You can use the Hash::checkSodium() method to check if libsodium is installed. Generating a sodium key First, you need to generate a sodium key. This key is automatically renewed with each new request, so it can be stored in a database, in the session or in another type of storage. use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey(); Encrypting and decrypting with Sodium Use the Hash::sodiumCrypt() (to encrypt), and Hash::sodiumDecrypt() (to decrypt) methods. Remember to use the key generated using the Hash::getSodiumKey() method. use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey(); # Crypt $encoded = Hash::sodiumCrypt(\"HashTest!\", $key); pre($encoded); # Decrypt $decoded = Hash::sodiumDecrypt($encoded, $key); pre($decoded);","title":"Cryptography"},{"location":"crypt/#encrypt","text":"To create an encrypted key, use the Hash class together with the static encrypt function as shown below: use Solital\\Core\\Security\\Hash; $res = Hash::encrypt('word_to_encrypt'); pre($res); You can define how long this key will be valid. It can be 1 second, 1 hour or 1 year. by default the value is +1 hour . use Solital\\Core\\Security\\Hash; $res = Hash::encrypt('word_to_encrypt', '+1 month'); pre($res);","title":"Encrypt"},{"location":"crypt/#decrypt","text":"If you want to decrypt, use the decrypt function chained with the value method. use Solital\\Core\\Security\\Hash; $res = Hash::decrypt('word_to_decrypt')->value(); pre($res);","title":"Decrypt"},{"location":"crypt/#check-value","text":"If you want to check if the encrypted key is still valid, use isValid . If you want to verify that the encrypted key is still valid, use isValid . the isValid method will return true if it is still valid, and false if it is already expired use Solital\\Core\\Security\\Hash; $res = Hash::decrypt('word_to_decrypt')->isValid(); pre($res);","title":"Check value"},{"location":"crypt/#sodium-encryption","text":"Solital supports Sodium encryption. To enable, make sure that libsodium is installed in your development environment. You can use the Hash::checkSodium() method to check if libsodium is installed.","title":"Sodium encryption"},{"location":"crypt/#generating-a-sodium-key","text":"First, you need to generate a sodium key. This key is automatically renewed with each new request, so it can be stored in a database, in the session or in another type of storage. use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey();","title":"Generating a sodium key"},{"location":"crypt/#encrypting-and-decrypting-with-sodium","text":"Use the Hash::sodiumCrypt() (to encrypt), and Hash::sodiumDecrypt() (to decrypt) methods. Remember to use the key generated using the Hash::getSodiumKey() method. use Solital\\Core\\Security\\Hash; $key = Hash::getSodiumKey(); # Crypt $encoded = Hash::sodiumCrypt(\"HashTest!\", $key); pre($encoded); # Decrypt $decoded = Hash::sodiumDecrypt($encoded, $key); pre($decoded);","title":"Encrypting and decrypting with Sodium"},{"location":"csrf/","text":"Introducion CSRF is one of the most well-known attacks, it has existed since the \u201cfoundation\u201d of the Web. It occurs when an HTTP request is made between sites in an attempt to impersonate a legitimate user. Whoever uses this type of attack usually focuses on doing so hoping that the target user will be authenticated on the site where the fraudulent request will be made, in order to have more privileges and access to operations. And the reason for the whole problem is how browsers handle Cookies. Any forms posting to POST , PUT or DELETE routes should include the CSRF-token. We strongly recommend that you enable CSRF-verification on your site to maximize security. The CSRF check is generated by default in Solital, but it is possible to extend this check. You can use the BaseCsrfVerifier to enable CSRF-validation on all request. If you need to disable verification for specific urls, please refer to the \"Custom CSRF-verifier\" section below. By default Solital will use the CookieTokenProvider class. This provider will store the security-token in a cookie on the clients machine. If you want to store the token elsewhere, please refer to the \"Creating custom Token Provider\" section below. Adding CSRF-verifier When you've created your CSRF-verifier you need to tell Solital that it should use it. You can do this by adding the following line in your routes.php file: Course::csrfVerifier(new \\Solital\\Core\\Http\\Middleware\\BaseCsrfVerifier()); Getting CSRF-token When posting to any of the urls that has CSRF-verification enabled, you need post your CSRF-token or else the request will get rejected. You can get the CSRF-token by calling the helper method: csrf_token(); You can also get the token directly: return Course::router()->getCsrfVerifier()->getTokenProvider()->setToken(); The default name/key for the input-field is csrf_token and is defined in the POST_KEY constant in the BaseCsrfVerifier class. You can change the key by overwriting the constant in your own CSRF-verifier class. Example: The example below will post to the current url with a hidden field \" csrf_token \". <form method=\"post\" action=\"<?= url(); ?>\"> <?= csrf_token(); ?> <!-- other input elements here --> </form>","title":"CSRF Protection"},{"location":"csrf/#introducion","text":"CSRF is one of the most well-known attacks, it has existed since the \u201cfoundation\u201d of the Web. It occurs when an HTTP request is made between sites in an attempt to impersonate a legitimate user. Whoever uses this type of attack usually focuses on doing so hoping that the target user will be authenticated on the site where the fraudulent request will be made, in order to have more privileges and access to operations. And the reason for the whole problem is how browsers handle Cookies. Any forms posting to POST , PUT or DELETE routes should include the CSRF-token. We strongly recommend that you enable CSRF-verification on your site to maximize security. The CSRF check is generated by default in Solital, but it is possible to extend this check. You can use the BaseCsrfVerifier to enable CSRF-validation on all request. If you need to disable verification for specific urls, please refer to the \"Custom CSRF-verifier\" section below. By default Solital will use the CookieTokenProvider class. This provider will store the security-token in a cookie on the clients machine. If you want to store the token elsewhere, please refer to the \"Creating custom Token Provider\" section below.","title":"Introducion"},{"location":"csrf/#adding-csrf-verifier","text":"When you've created your CSRF-verifier you need to tell Solital that it should use it. You can do this by adding the following line in your routes.php file: Course::csrfVerifier(new \\Solital\\Core\\Http\\Middleware\\BaseCsrfVerifier());","title":"Adding CSRF-verifier"},{"location":"csrf/#getting-csrf-token","text":"When posting to any of the urls that has CSRF-verification enabled, you need post your CSRF-token or else the request will get rejected. You can get the CSRF-token by calling the helper method: csrf_token(); You can also get the token directly: return Course::router()->getCsrfVerifier()->getTokenProvider()->setToken(); The default name/key for the input-field is csrf_token and is defined in the POST_KEY constant in the BaseCsrfVerifier class. You can change the key by overwriting the constant in your own CSRF-verifier class. Example: The example below will post to the current url with a hidden field \" csrf_token \". <form method=\"post\" action=\"<?= url(); ?>\"> <?= csrf_token(); ?> <!-- other input elements here --> </form>","title":"Getting CSRF-token"},{"location":"date/","text":"It is possible to manipulate dates and times using the Convertime class. To begin, run the instance: use Solital\\Core\\Resource\\Validation\\Convertime; $convertime = new Convertime(); In the class constructor, you can define the timezone. By default, the default timezone is set to America/Sao_Paulo . $convertime = new Convertime(\"America/Fortaleza\"); Format date To format a date, enter the date you want to convert and the format to be converted. $convertime = new Convertime(); $res = $convertime->formatDate('04/01/1999', 'Y-m-d'); /* Return 1999-01-04 */ pre($res); Add months to a date In some cases, you may need to add months to a specific date. To do this, use the addMonth class. This class is similar to the formatDate class, with the difference that you must enter in the last parameter the number of months that will be added to the date. This class already has conversion for days with 28, 29, 30 or 31 days. $convertime = new Convertime(); $res = $convertime->addMonth('1999-01-04', 'd/m/Y', 1); /* Return 1999-02-04 */ pre($res); Add days to a date To add days to a date, the addDays method works in a similar way to the addMonth method. $convertime = new Convertime(); $res = $convertime->addDays('1999-01-04', 'd/m/Y', 3); /* Return 1999-01-07 */ pre($res); Add time to another time It is possible to add a specific time to another time. For example: add 3 more hours at 13:00. $convertime = new Convertime(); $res = $convertime->addHour('13:00', '03:00'); /* Return 16:00 */ pre($res);","title":"Date and time"},{"location":"date/#format-date","text":"To format a date, enter the date you want to convert and the format to be converted. $convertime = new Convertime(); $res = $convertime->formatDate('04/01/1999', 'Y-m-d'); /* Return 1999-01-04 */ pre($res);","title":"Format date"},{"location":"date/#add-months-to-a-date","text":"In some cases, you may need to add months to a specific date. To do this, use the addMonth class. This class is similar to the formatDate class, with the difference that you must enter in the last parameter the number of months that will be added to the date. This class already has conversion for days with 28, 29, 30 or 31 days. $convertime = new Convertime(); $res = $convertime->addMonth('1999-01-04', 'd/m/Y', 1); /* Return 1999-02-04 */ pre($res);","title":"Add months to a date"},{"location":"date/#add-days-to-a-date","text":"To add days to a date, the addDays method works in a similar way to the addMonth method. $convertime = new Convertime(); $res = $convertime->addDays('1999-01-04', 'd/m/Y', 3); /* Return 1999-01-07 */ pre($res);","title":"Add days to a date"},{"location":"date/#add-time-to-another-time","text":"It is possible to add a specific time to another time. For example: add 3 more hours at 13:00. $convertime = new Convertime(); $res = $convertime->addHour('13:00', '03:00'); /* Return 16:00 */ pre($res);","title":"Add time to another time"},{"location":"deploy/","text":"To deploy your project made in Solital Framework, do a git pull on your hosting. Then, update all components using composer update . Solital may receive some important updates during this period of development. Apache There is a htaccess file inside the public/ folder, but Apache needs to point to this folder. Therefore, in the root folder of your project, insert this other htaccess file below: RewriteEngine on # Force HTTPS RewriteCond %{HTTPS} off # Redirect to public/ with HTTPS RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] RewriteCond %{HTTP_HOST} ^YOUR_DOMAIN.com$ [NC,OR] RewriteCond %{HTTP_HOST} ^www.YOUR_DOMAIN.com$ RewriteCond %{REQUEST_URI} !public/ RewriteRule (.*) /public/$1 [L] Replace YOUR_DOMAIN by the name of your primary domain. Nginx If you are using Nginx please make sure that url-rewriting is enabled. You can easily enable url-rewriting by adding the following configuration for the Nginx configuration-file for the demo-project. location / { try_files $uri $uri/ /index.php?$query_string; }","title":"Deploy"},{"location":"deploy/#apache","text":"There is a htaccess file inside the public/ folder, but Apache needs to point to this folder. Therefore, in the root folder of your project, insert this other htaccess file below: RewriteEngine on # Force HTTPS RewriteCond %{HTTPS} off # Redirect to public/ with HTTPS RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] RewriteCond %{HTTP_HOST} ^YOUR_DOMAIN.com$ [NC,OR] RewriteCond %{HTTP_HOST} ^www.YOUR_DOMAIN.com$ RewriteCond %{REQUEST_URI} !public/ RewriteRule (.*) /public/$1 [L] Replace YOUR_DOMAIN by the name of your primary domain.","title":"Apache"},{"location":"deploy/#nginx","text":"If you are using Nginx please make sure that url-rewriting is enabled. You can easily enable url-rewriting by adding the following configuration for the Nginx configuration-file for the demo-project. location / { try_files $uri $uri/ /index.php?$query_string; }","title":"Nginx"},{"location":"env/","text":"The .env file has all the variables that Solital uses. Some are filled in by default, but others you need to edit as needed. Below we will see what each variable does: Displays all errors that Solital or PHP raises. Activate only in development mode ERRORS_DISPLAY=\"true\" Standard index that Solital uses to store session login. To learn more, see Authenticate INDEX_LOGIN=\"solital_index_login\" Database connection variables. To find out more, see Katrina ORM DB_DRIVE=\"\" DB_HOST=\"\" DB_NAME=\"\" DB_USER=\"\" DB_PASS=\"\" SQLITE_DIR=\"\" Variables of the NativeMail class MAIL_SENDER=\"\" MAIL_RECIPIENT=\"\" Variables of the PHPMailerClass class PHPMAILER_DEBUG=\"\" PHPMAILER_HOST=\"\" PHPMAILER_USER=\"\" PHPMAILER_PASS=\"\" PHPMAILER_SECURITY=\"\" PHPMAILER_PORT=\"\" Variables used in encryption. It is recommended that you add new values to these variables. FIRST_SECRET=\"first_secret\" SECOND_SECRET=\"second_secret\" These variables are unique to Windows. Add the path of the executable that dumps the database. To learn more, see Builder SQL MYSQL_DUMP=\"C:\\\\xampp\\\\mysql\\\\bin\\\\mysqldump.exe\" PG_DUMP=\"\" SQLITE3=\"\"","title":"Environment variables"},{"location":"events/","text":"Events This section will help you understand how to register your own callbacks to events in the router. It will also cover the basics of event-handlers; how to use the handlers provided with the router and how to create your own custom event-handlers. Available events This section contains all available events that can be registered using the EventHandler . All event callbacks will retrieve a EventArgument object as parameter. This object contains easy access to event-name, router- and request instance and any special event-arguments related to the given event. You can see what special event arguments each event returns in the list below. Name Special arguments Description EVENT_ALL - Fires when a event is triggered. EVENT_INIT - Fires when router is initializing and before routes are loaded. EVENT_LOAD loadedRoutes Fires when all routes has been loaded and rendered, just before the output is returned. EVENT_ADD_ROUTE route Fires when route is added to the router. EVENT_REWRITE rewriteUrl rewriteRoute Fires when a url-rewrite is and just before the routes are re-initialized. EVENT_BOOT bootmanagers Fires when the router is booting. This happens just before boot-managers are rendered and before any routes has been loaded. EVENT_RENDER_BOOTMANAGER bootmanagers bootmanager Fires before a boot-manager is rendered. EVENT_LOAD_ROUTES routes Fires when the router is about to load all routes. EVENT_FIND_ROUTE name Fires whenever the findRoute method is called within the Router . This usually happens when the router tries to find routes that contains a certain url, usually after the EventHandler::EVENT_GET_URL event. EVENT_GET_URL name parameters getParams Fires whenever the Router::getUrl method or url -helper function is called and the router tries to find the route. EVENT_MATCH_ROUTE route Fires when a route is matched and valid (correct request-type etc). and before the route is rendered. EVENT_RENDER_ROUTE route Fires before a route is rendered. EVENT_LOAD_EXCEPTIONS exception exceptionHandlers Fires when the router is loading exception-handlers. EVENT_RENDER_EXCEPTION exception exceptionHandler exceptionHandlers Fires before the router is rendering a exception-handler. EVENT_RENDER_MIDDLEWARES route middlewares Fires before middlewares for a route is rendered. EVENT_RENDER_CSRF csrfVerifier Fires before the CSRF-verifier is rendered. - Registering new event To register a new event you need to create a new instance of the EventHandler object. On this object you can add as many callbacks as you like by calling the registerEvent method. When you've registered events, make sure to add it to the router by calling Course::addEventHandler() . We recommend that you add your event-handlers within your routes.php . Example: use Solital\\Core\\Course\\Handlers\\EventHandler; use Solital\\Core\\Course\\Event\\EventArgument; // --- your routes goes here --- $eventHandler = new EventHandler(); // Add event that fires when a route is rendered $eventHandler->register(EventHandler::EVENT_RENDER_ROUTE, function(EventArgument $argument) { // Get the route by using the special argument for this event. $route = $argument->route; // DO STUFF... }); Course::addEventHandler($eventHandler); Custom EventHandlers EventHandler is the class that manages events and must inherit from the EventHandlerInterface interface. The handler knows how to handle events for the given handler-type. Most of the time the basic \\Solital\\Core\\Course\\Handler\\EventHandler class will be more than enough for most people as you simply register an event which fires when triggered. Let's go over how to create your very own event-handler class. Below is a basic example of a custom event-handler called DatabaseDebugHandler . The idea of the sample below is to logs all events to the database when triggered. Hopefully it will be enough to give you an idea on how the event-handlers work. namespace Demo\\Handlers; use Solital\\Core\\Course\\Event\\EventArgument; use Solital\\Core\\Course\\Router; class DatabaseDebugHandler implements EventHandlerInterface { /** * Debug callback * @var \\Closure */ protected $callback; public function __construct() { $this->callback = function (EventArgument $argument) { // todo: store log in database }; } /** * Get events. * * @param string|null $name Filter events by name. * @return array */ public function getEvents(?string $name): array { return [ $name => [ $this->callback, ], ]; } /** * Fires any events registered with given event-name * * @param Router $router Router instance * @param string $name Event name * @param array ...$eventArgs Event arguments */ public function fireEvents(Router $router, string $name, ...$eventArgs): void { $callback = $this->callback; $callback(new EventArgument($router, $eventArgs)); } /** * Set debug callback * * @param \\Closure $event */ public function setCallback(\\Closure $event): void { $this->callback = $event; } } Using the PSR-14 It is possible to use the PSR-14 through the EventDispatcher class. You can create the test class below: class UserTest { public function testLow() { echo \"Running Low ...\"; } public function testNormal() { echo \"Running Normal ...\"; } public function testHigh() { echo \"Running High ...\"; } } Then, use the addListener method to add the event referring to the UserTest class. You can define the priority of each method and the order in which it will be executed. To do this, use a number in the last parameter of addListener . $provider = new ListenerProvider(); $event = new EventDispatcher($provider); $user = new UserTest(); $provider->addListener(function (UserTest $user) { $user->testLow(); }, 1); $provider->addListener(function (UserTest $user) { $user->testNormal(); }, 2); $provider->addListener(function (UserTest $user) { $user->testHigh(); }, 3); $event->dispatch($user); As defined in the priority, the result will be Running High... , Running Normal... and Running Low... .","title":"Events"},{"location":"events/#events","text":"This section will help you understand how to register your own callbacks to events in the router. It will also cover the basics of event-handlers; how to use the handlers provided with the router and how to create your own custom event-handlers.","title":"Events"},{"location":"events/#available-events","text":"This section contains all available events that can be registered using the EventHandler . All event callbacks will retrieve a EventArgument object as parameter. This object contains easy access to event-name, router- and request instance and any special event-arguments related to the given event. You can see what special event arguments each event returns in the list below. Name Special arguments Description EVENT_ALL - Fires when a event is triggered. EVENT_INIT - Fires when router is initializing and before routes are loaded. EVENT_LOAD loadedRoutes Fires when all routes has been loaded and rendered, just before the output is returned. EVENT_ADD_ROUTE route Fires when route is added to the router. EVENT_REWRITE rewriteUrl rewriteRoute Fires when a url-rewrite is and just before the routes are re-initialized. EVENT_BOOT bootmanagers Fires when the router is booting. This happens just before boot-managers are rendered and before any routes has been loaded. EVENT_RENDER_BOOTMANAGER bootmanagers bootmanager Fires before a boot-manager is rendered. EVENT_LOAD_ROUTES routes Fires when the router is about to load all routes. EVENT_FIND_ROUTE name Fires whenever the findRoute method is called within the Router . This usually happens when the router tries to find routes that contains a certain url, usually after the EventHandler::EVENT_GET_URL event. EVENT_GET_URL name parameters getParams Fires whenever the Router::getUrl method or url -helper function is called and the router tries to find the route. EVENT_MATCH_ROUTE route Fires when a route is matched and valid (correct request-type etc). and before the route is rendered. EVENT_RENDER_ROUTE route Fires before a route is rendered. EVENT_LOAD_EXCEPTIONS exception exceptionHandlers Fires when the router is loading exception-handlers. EVENT_RENDER_EXCEPTION exception exceptionHandler exceptionHandlers Fires before the router is rendering a exception-handler. EVENT_RENDER_MIDDLEWARES route middlewares Fires before middlewares for a route is rendered. EVENT_RENDER_CSRF csrfVerifier Fires before the CSRF-verifier is rendered. -","title":"Available events"},{"location":"events/#registering-new-event","text":"To register a new event you need to create a new instance of the EventHandler object. On this object you can add as many callbacks as you like by calling the registerEvent method. When you've registered events, make sure to add it to the router by calling Course::addEventHandler() . We recommend that you add your event-handlers within your routes.php . Example: use Solital\\Core\\Course\\Handlers\\EventHandler; use Solital\\Core\\Course\\Event\\EventArgument; // --- your routes goes here --- $eventHandler = new EventHandler(); // Add event that fires when a route is rendered $eventHandler->register(EventHandler::EVENT_RENDER_ROUTE, function(EventArgument $argument) { // Get the route by using the special argument for this event. $route = $argument->route; // DO STUFF... }); Course::addEventHandler($eventHandler);","title":"Registering new event"},{"location":"events/#custom-eventhandlers","text":"EventHandler is the class that manages events and must inherit from the EventHandlerInterface interface. The handler knows how to handle events for the given handler-type. Most of the time the basic \\Solital\\Core\\Course\\Handler\\EventHandler class will be more than enough for most people as you simply register an event which fires when triggered. Let's go over how to create your very own event-handler class. Below is a basic example of a custom event-handler called DatabaseDebugHandler . The idea of the sample below is to logs all events to the database when triggered. Hopefully it will be enough to give you an idea on how the event-handlers work. namespace Demo\\Handlers; use Solital\\Core\\Course\\Event\\EventArgument; use Solital\\Core\\Course\\Router; class DatabaseDebugHandler implements EventHandlerInterface { /** * Debug callback * @var \\Closure */ protected $callback; public function __construct() { $this->callback = function (EventArgument $argument) { // todo: store log in database }; } /** * Get events. * * @param string|null $name Filter events by name. * @return array */ public function getEvents(?string $name): array { return [ $name => [ $this->callback, ], ]; } /** * Fires any events registered with given event-name * * @param Router $router Router instance * @param string $name Event name * @param array ...$eventArgs Event arguments */ public function fireEvents(Router $router, string $name, ...$eventArgs): void { $callback = $this->callback; $callback(new EventArgument($router, $eventArgs)); } /** * Set debug callback * * @param \\Closure $event */ public function setCallback(\\Closure $event): void { $this->callback = $event; } }","title":"Custom EventHandlers"},{"location":"events/#using-the-psr-14","text":"It is possible to use the PSR-14 through the EventDispatcher class. You can create the test class below: class UserTest { public function testLow() { echo \"Running Low ...\"; } public function testNormal() { echo \"Running Normal ...\"; } public function testHigh() { echo \"Running High ...\"; } } Then, use the addListener method to add the event referring to the UserTest class. You can define the priority of each method and the order in which it will be executed. To do this, use a number in the last parameter of addListener . $provider = new ListenerProvider(); $event = new EventDispatcher($provider); $user = new UserTest(); $provider->addListener(function (UserTest $user) { $user->testLow(); }, 1); $provider->addListener(function (UserTest $user) { $user->testNormal(); }, 2); $provider->addListener(function (UserTest $user) { $user->testHigh(); }, 3); $event->dispatch($user); As defined in the priority, the result will be Running High... , Running Normal... and Running Low... .","title":"Using the PSR-14"},{"location":"filesystem/","text":"You can manipulate folders and files within Solital through the HandleFiles class, such as creating folders, removing folders, listing files and deleting files. use Solital\\Core\\Resource\\FileSystem\\HandleFiles; $handle = new HandleFiles(); List files within a folder list multiple files Use the folder() method to define the folder containing the files in Solital to be listed. To list all files within that folder, chain the files() method. /** Array return */ $res = $handle->folder(\"folder_name\")->files(); pre($res); list single file /** String return */ $res = $handle->folder(\"folder_name\")->file('README.md'); pre($res); To list only a single file within the folder, use the file() method passing as a parameter the file you want to search for Check if a file exists To check if there is a file inside the folder, use fileExists() . /** Boolean return */ $res = $handle->folder(\"folder_name\")->fileExists(\"README.md\"); pre($res); You can delete the file if it exists, to do so enter true in the second parameter. /** Boolean return */ $res = $handle->folder(\"folder_name\")->fileExists(\"README.md\", true); pre($res); Create folder To create a folder inside Solital, use only the create() method. /** Boolean return */ $res = $handle->create(\"folder_name\"); pre($res); You can define the type of permission the folder will have. The default is 0777. /** Boolean return */ $res = $handle->create(\"folder_name\", 0755); pre($res); Remove folder To delete a folder inside Solital, use only the remove() method. This method will delete a folder if it is empty. /** Boolean return */ $res = $handle->remove(\"folder_name\"); pre($res); The remove() method checks for files inside the folder. If you want to delete the files inside the folder, pass false in the second parameter. /** Boolean return */ $res = $handle->remove(\"folder_name\", false); pre($res); Get and Put Contents It is possible to use the native PHP functions file_get_contents and file_put_contents at the same time. The getAndPutContents method performs this process. $res = $handle->getAndPutContents('file.txt', 'file_bkp.txt'); pre($res); Copy Make a copy of a file using the copy method. /** Boolean return */ $res = $handle->copy('file.txt', 'file_bkp.txt'); pre($res); If you want to delete the original photo after copying, use true . /** Boolean return */ $res = $handle->copy('file.txt', 'file_bkp.txt', true); pre($res); Handling permissions You can change and view file and folder permissions. List permissions The getPermission method lists the permissions that the file or folder has. /** Null|string return */ $res = $handle->getPermission('file.txt'); pre($res); List full permissions To return full permissions, use the getFullPermission method. /** String return */ $res = $handle->getFullPermission('file.txt'); pre($res); Change permissions The setPermission method changes the permissions that the file or folder will have. /** Boolean return */ $handle->setPermission('file.txt', 0777); Modify owner of the file Use the setOwner method to modify the owner of the file. /** Boolean return */ $res = $handle->setOwner('file.txt', 'root'); pre($res);","title":"File System"},{"location":"filesystem/#list-files-within-a-folder","text":"list multiple files Use the folder() method to define the folder containing the files in Solital to be listed. To list all files within that folder, chain the files() method. /** Array return */ $res = $handle->folder(\"folder_name\")->files(); pre($res); list single file /** String return */ $res = $handle->folder(\"folder_name\")->file('README.md'); pre($res); To list only a single file within the folder, use the file() method passing as a parameter the file you want to search for","title":"List files within a folder"},{"location":"filesystem/#check-if-a-file-exists","text":"To check if there is a file inside the folder, use fileExists() . /** Boolean return */ $res = $handle->folder(\"folder_name\")->fileExists(\"README.md\"); pre($res); You can delete the file if it exists, to do so enter true in the second parameter. /** Boolean return */ $res = $handle->folder(\"folder_name\")->fileExists(\"README.md\", true); pre($res);","title":"Check if a file exists"},{"location":"filesystem/#create-folder","text":"To create a folder inside Solital, use only the create() method. /** Boolean return */ $res = $handle->create(\"folder_name\"); pre($res); You can define the type of permission the folder will have. The default is 0777. /** Boolean return */ $res = $handle->create(\"folder_name\", 0755); pre($res);","title":"Create folder"},{"location":"filesystem/#remove-folder","text":"To delete a folder inside Solital, use only the remove() method. This method will delete a folder if it is empty. /** Boolean return */ $res = $handle->remove(\"folder_name\"); pre($res); The remove() method checks for files inside the folder. If you want to delete the files inside the folder, pass false in the second parameter. /** Boolean return */ $res = $handle->remove(\"folder_name\", false); pre($res);","title":"Remove folder"},{"location":"filesystem/#get-and-put-contents","text":"It is possible to use the native PHP functions file_get_contents and file_put_contents at the same time. The getAndPutContents method performs this process. $res = $handle->getAndPutContents('file.txt', 'file_bkp.txt'); pre($res);","title":"Get and Put Contents"},{"location":"filesystem/#copy","text":"Make a copy of a file using the copy method. /** Boolean return */ $res = $handle->copy('file.txt', 'file_bkp.txt'); pre($res); If you want to delete the original photo after copying, use true . /** Boolean return */ $res = $handle->copy('file.txt', 'file_bkp.txt', true); pre($res);","title":"Copy"},{"location":"filesystem/#handling-permissions","text":"You can change and view file and folder permissions.","title":"Handling permissions"},{"location":"filesystem/#list-permissions","text":"The getPermission method lists the permissions that the file or folder has. /** Null|string return */ $res = $handle->getPermission('file.txt'); pre($res);","title":"List permissions"},{"location":"filesystem/#list-full-permissions","text":"To return full permissions, use the getFullPermission method. /** String return */ $res = $handle->getFullPermission('file.txt'); pre($res);","title":"List full permissions"},{"location":"filesystem/#change-permissions","text":"The setPermission method changes the permissions that the file or folder will have. /** Boolean return */ $handle->setPermission('file.txt', 0777);","title":"Change permissions"},{"location":"filesystem/#modify-owner-of-the-file","text":"Use the setOwner method to modify the owner of the file. /** Boolean return */ $res = $handle->setOwner('file.txt', 'root'); pre($res);","title":"Modify owner of the file"},{"location":"forgot/","text":"Password recovery structure You can create a predefined password recovery framework. To do so, use the php vinci forgot command This command creates a controller with the name ForgotController . With it you will have all the basis to create a password recovery system. Setting Solital has a standard method for password recovery. For that, it is necessary to configure only the variable MAIL_SENDER in the file .env , inserting the sender and recipient. This procedure uses the forgot method to define the database table. The columns method the form's email field. In the values method, the e-mail that will be sent the recovery link is informed in the first parameter, and in the second parameter the URL that will be contained in the e-mail to change the password. The register method will check and send the email. /** * @return void */ public function forgotPost(): void { $email = input()->post('email')->getValue(); $res = Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) ->register(); if ($res == true) { $this->message->new('forgot', 'Link sent to your email!'); response()->redirect(url('forgot')); } } Setting expiration time By default, the link sent is valid for 1 hour. You can change this behavior using the timeHash() method. Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) # Here the code ->timeHash('+2 hours') ->register(); Using PHP Mailer The password recovery procedure uses the native PHP class for sending e-mail. However, it is not always interesting to use this class, so you can use the usePHPMailer() method to send the email using PHP Mailer. Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) # Here the code ->usePHPMailer() ->register(); If necessary, you can use true as a parameter to display PHP Mailer exceptions. # ... ->usePHPMailer(true) # ... Changing email fields By default, \"User\" is sent as the name of the sender and recipient. \"Forgot Password\" as the title of the email. To change these fields, use the fields() function. Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) # Here the code ->fields('name_sender', 'name_recipient', 'subject') ->register(); Changing default email If you need to change the default password recovery email, you must first use the generateLink() function. This function generates a new link in which the user will be redirected when changing the password. First, it is necessary to inform the user's email, the route he will access to change the password, and the length of time that this link will be valid. The code below shows an example of this use: $msg = \"<h1>Retrieve your password</h1>\"; $msg .= \"<p>Click the link below to change your password</p>\"; $msg .= \"<a href='\".generateLink($email, url('change'), '+2 hours').\"'>Change Here!!</a>\"; Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) # Here the code ->fields('name_sender', 'name_recipient', 'subject', $msg) ->register(); Validade link To validate the information by clicking on the email link, you can use the structure below: /** * @param string $hash * * @return void */ public function change($hash): void { $res = Hash::decrypt($hash)->isValid(); if ($res == true) { $email = Hash::decrypt($hash)->value(); Wolf::loadView('auth.change-pass-form', [ 'title' => 'Change Password', 'email' => $email, 'hash' => $hash ]); } else { $this->message->new('login', 'The informed link has already expired!'); response()->redirect(url('auth')); } } Changing the password This procedure uses the change method to define the database table. The columns method defines the database user and password fields. The values method defines the user's email in the first parameter, and the new password in the second parameter. The register method will check and change the email. Auth::change('tb_auth') ->columns('username', 'password') ->values($email, $pass) ->register();","title":"Recovery Password"},{"location":"forgot/#password-recovery-structure","text":"You can create a predefined password recovery framework. To do so, use the php vinci forgot command This command creates a controller with the name ForgotController . With it you will have all the basis to create a password recovery system.","title":"Password recovery structure"},{"location":"forgot/#setting","text":"Solital has a standard method for password recovery. For that, it is necessary to configure only the variable MAIL_SENDER in the file .env , inserting the sender and recipient. This procedure uses the forgot method to define the database table. The columns method the form's email field. In the values method, the e-mail that will be sent the recovery link is informed in the first parameter, and in the second parameter the URL that will be contained in the e-mail to change the password. The register method will check and send the email. /** * @return void */ public function forgotPost(): void { $email = input()->post('email')->getValue(); $res = Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) ->register(); if ($res == true) { $this->message->new('forgot', 'Link sent to your email!'); response()->redirect(url('forgot')); } }","title":"Setting"},{"location":"forgot/#setting-expiration-time","text":"By default, the link sent is valid for 1 hour. You can change this behavior using the timeHash() method. Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) # Here the code ->timeHash('+2 hours') ->register();","title":"Setting expiration time"},{"location":"forgot/#using-php-mailer","text":"The password recovery procedure uses the native PHP class for sending e-mail. However, it is not always interesting to use this class, so you can use the usePHPMailer() method to send the email using PHP Mailer. Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) # Here the code ->usePHPMailer() ->register(); If necessary, you can use true as a parameter to display PHP Mailer exceptions. # ... ->usePHPMailer(true) # ...","title":"Using PHP Mailer"},{"location":"forgot/#changing-email-fields","text":"By default, \"User\" is sent as the name of the sender and recipient. \"Forgot Password\" as the title of the email. To change these fields, use the fields() function. Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) # Here the code ->fields('name_sender', 'name_recipient', 'subject') ->register();","title":"Changing email fields"},{"location":"forgot/#changing-default-email","text":"If you need to change the default password recovery email, you must first use the generateLink() function. This function generates a new link in which the user will be redirected when changing the password. First, it is necessary to inform the user's email, the route he will access to change the password, and the length of time that this link will be valid. The code below shows an example of this use: $msg = \"<h1>Retrieve your password</h1>\"; $msg .= \"<p>Click the link below to change your password</p>\"; $msg .= \"<a href='\".generateLink($email, url('change'), '+2 hours').\"'>Change Here!!</a>\"; Auth::forgot('tb_auth') ->columns('username') ->values($email, url('change')) # Here the code ->fields('name_sender', 'name_recipient', 'subject', $msg) ->register();","title":"Changing default email"},{"location":"forgot/#validade-link","text":"To validate the information by clicking on the email link, you can use the structure below: /** * @param string $hash * * @return void */ public function change($hash): void { $res = Hash::decrypt($hash)->isValid(); if ($res == true) { $email = Hash::decrypt($hash)->value(); Wolf::loadView('auth.change-pass-form', [ 'title' => 'Change Password', 'email' => $email, 'hash' => $hash ]); } else { $this->message->new('login', 'The informed link has already expired!'); response()->redirect(url('auth')); } }","title":"Validade link"},{"location":"forgot/#changing-the-password","text":"This procedure uses the change method to define the database table. The columns method defines the database user and password fields. The values method defines the user's email in the first parameter, and the new password in the second parameter. The register method will check and change the email. Auth::change('tb_auth') ->columns('username', 'password') ->values($email, $pass) ->register();","title":"Changing the password"},{"location":"helpers/","text":"HTTP Handles the URI class. See more in routes . /** * @param string $name * @param mixed $parameters * @param null|array $getParams */ url(?string $name = null, $parameters = null, ?array $getParams) Handles the Response class. response() Handles the Request class. request() Get input class. See more in Input and params . /** * @param string|null $index: Parameter index name * @param string|null $defaultValue: Default return value * @param array ...$methods: Default methods * * @return mixed */ input(string $index = null, string $defaultValue = null, ...$methods) Redirect to another route. /** * @param string $url: the route to which you will be redirected * @param int|null $code: HTTP code */ redirect(string $url, ?int $code = null) Defines a limit on requests that can be made at a certain time /** * @param string $key: key to identify the requisition * @param int $limit: number of times the request can be made * @param int $seconds: waiting time until it is possible to make the request again. * * @return bool */ request_limit(string $key, int $limit = 5, int $seconds = 60) Checks if a value was previously sent in the requisition. /** * @param string $key: key to identify the requisition * @param string $value: value that will be added * * @return bool */ request_repeat(string $key, string $value) Security Get current csrf-token. See more in CSRF Protection . csrf_token() Form method spoofing. /** * @param string $method: GET, POST, PUT or DELETE */ spoofing(string $method) Similar to password_hash . /** * @param mixed $value: the user's password. * @param int $cost: which denotes the algorithmic cost that should be used. */ pass_hash($value, int $cost = 10) Similar to password_verify . /** * @param mixed $value: the user's password. * @param string $hash: a hash created by `pass_hash()`. */ pass_verify($value, string $hash) Wolf Template See Wolf Template to use Wolf helpers. Load a CSS file into the public/assets/_css/ folder. /** * @param string $asset: CSS file name */ loadCss(string $asset) Loads the minified CSS file created by the minify()->style() method. loadMinCss() Load a Javascript file into the public/assets/_js/ folder. /** * @param string $asset: javascript file name */ loadJs(string $asset) Loads the minified Javascript file created by the minify()->script() method. loadMinJs() Load a image file into the public/assets/_img/ folder. /** * @param string $asset: image file name */ loadImg(string $asset) Load a file into the public/assets/ folder. /** * @param string $asset: external file name */ loadFile(string $asset) Output Formatted var_dump . /** * @param mixed $value: to format */ pre($value) cloner uses Symfony VarCloner function. See more . /** * @param mixed $var */ cloner($var) Displays the variable formatted in string. true to return as an array. /** * @param mixed $var * @param bool $length */ dumper($var, bool $length = false) It is possible to make use of Symfony dump function. dump($var) export uses the Symfony VarExport function. See more . /** * @param mixed $value */ export($value) Convert an array to JSON and display an error message in case of failure. /** * @param mixed $value: to JSON */ encodeJSON($value) Convert a JSON to an object and display an error message in case of failure. true to convert JSON to an array. /** * @param mixed $value: to JSON * @param bool $toArray: convert JSON object in array */ decodeJSON($value, bool $toArray = false) Write any message in the browser LOG, which can be viewed at any time. /** * @param mixed ...$messages * * @return void */ console_log(...$messages) Others Removes GET parameters in the URL and reloads the page without those parameters. remove_param() Check if variable is JSON. /** * @param mixed $string: verify if value is JSON */ is_json($string) Get the current full URL. /** * @param string $uri */ get_url(string $uri = null)","title":"Helpers"},{"location":"helpers/#http","text":"Handles the URI class. See more in routes . /** * @param string $name * @param mixed $parameters * @param null|array $getParams */ url(?string $name = null, $parameters = null, ?array $getParams) Handles the Response class. response() Handles the Request class. request() Get input class. See more in Input and params . /** * @param string|null $index: Parameter index name * @param string|null $defaultValue: Default return value * @param array ...$methods: Default methods * * @return mixed */ input(string $index = null, string $defaultValue = null, ...$methods) Redirect to another route. /** * @param string $url: the route to which you will be redirected * @param int|null $code: HTTP code */ redirect(string $url, ?int $code = null) Defines a limit on requests that can be made at a certain time /** * @param string $key: key to identify the requisition * @param int $limit: number of times the request can be made * @param int $seconds: waiting time until it is possible to make the request again. * * @return bool */ request_limit(string $key, int $limit = 5, int $seconds = 60) Checks if a value was previously sent in the requisition. /** * @param string $key: key to identify the requisition * @param string $value: value that will be added * * @return bool */ request_repeat(string $key, string $value)","title":"HTTP"},{"location":"helpers/#security","text":"Get current csrf-token. See more in CSRF Protection . csrf_token() Form method spoofing. /** * @param string $method: GET, POST, PUT or DELETE */ spoofing(string $method) Similar to password_hash . /** * @param mixed $value: the user's password. * @param int $cost: which denotes the algorithmic cost that should be used. */ pass_hash($value, int $cost = 10) Similar to password_verify . /** * @param mixed $value: the user's password. * @param string $hash: a hash created by `pass_hash()`. */ pass_verify($value, string $hash)","title":"Security"},{"location":"helpers/#wolf-template","text":"See Wolf Template to use Wolf helpers. Load a CSS file into the public/assets/_css/ folder. /** * @param string $asset: CSS file name */ loadCss(string $asset) Loads the minified CSS file created by the minify()->style() method. loadMinCss() Load a Javascript file into the public/assets/_js/ folder. /** * @param string $asset: javascript file name */ loadJs(string $asset) Loads the minified Javascript file created by the minify()->script() method. loadMinJs() Load a image file into the public/assets/_img/ folder. /** * @param string $asset: image file name */ loadImg(string $asset) Load a file into the public/assets/ folder. /** * @param string $asset: external file name */ loadFile(string $asset)","title":"Wolf Template"},{"location":"helpers/#output","text":"Formatted var_dump . /** * @param mixed $value: to format */ pre($value) cloner uses Symfony VarCloner function. See more . /** * @param mixed $var */ cloner($var) Displays the variable formatted in string. true to return as an array. /** * @param mixed $var * @param bool $length */ dumper($var, bool $length = false) It is possible to make use of Symfony dump function. dump($var) export uses the Symfony VarExport function. See more . /** * @param mixed $value */ export($value) Convert an array to JSON and display an error message in case of failure. /** * @param mixed $value: to JSON */ encodeJSON($value) Convert a JSON to an object and display an error message in case of failure. true to convert JSON to an array. /** * @param mixed $value: to JSON * @param bool $toArray: convert JSON object in array */ decodeJSON($value, bool $toArray = false) Write any message in the browser LOG, which can be viewed at any time. /** * @param mixed ...$messages * * @return void */ console_log(...$messages)","title":"Output"},{"location":"helpers/#others","text":"Removes GET parameters in the URL and reloads the page without those parameters. remove_param() Check if variable is JSON. /** * @param mixed $string: verify if value is JSON */ is_json($string) Get the current full URL. /** * @param string $uri */ get_url(string $uri = null)","title":"Others"},{"location":"http-client/","text":"Solital has a component to manipulate the HTTP client, useful for consuming API and making HTTP requests. Before, you will need to install the component using the command below: composer require solital/http-client Requirements PHP 7.4 or PHP ^8.0 CURL extension enabled Basic use To make basic use of the component, you will need to instantiate the HttpClient class. Then, call the request function, passing the method (GET, POST, ...) and the url as a parameter. Then return the data. use Solital\\HttpClient; $client = new HttpClient(); $client->request(\"GET\", \"http://api.url.com\"); $res = $client->toJson(); pre($res); Supported methods HttpClient supports the methods below. GET POST PUT DELETE PATCH OPTIONS Return types You can return the answer in json, array or object. The methods below show an example. $client = new HttpClient(); $client->request(\"GET\", \"http://api.url.com\"); /** Return json */ $res = $client->toJson(); /** Return array */ $res = $client->toArray(); /** Return object */ $res = $client->toObject(); pre($res); Sending data If you are using a POST or PUT request, for example, and need to send data to the HTTP header, you can pass an array with the values in the request method. $client = new HttpClient(); $res = $client->request(\"PUT\", \"http://api.url.com\", [ 'data' => 'your_data_values' ])->toJson(); echo $res; Custom Headers By default, HttpClient has the following headers: Content-Type: application/json Accept: application/json To add other headers to the request, use an array in the constructor on the instance. $headers = [ 'Content-Type: application/pdf' ]; $client = new HttpClient($headers); #... Enabling SSL verification HttpClient by default does not perform SSL verification. To enable verification, use the enableSSL method. $client = new HttpClient(); $client->enableSSL(); #... Authentication Basic Auth To perform authentication on an API that requires basic authentication, you can use the second parameter to inform the user and password. It is necessary to inform an array containing the indexes user and pass . $client = new HttpClient(null, [ 'user' => 'username', 'pass' => '123' ]); $client->request(\"GET\", \"http://api.url.com\"); $res = $client->toJson(); pre($res); Securing routes With Basic Auth Basic authentication requires the username and password in the class constructor. If an index other than user and pass is informed, an exception will be thrown. You can protect your routes through basic authentication as shown below. use Solital\\Http\\Auth\\HttpAuth; $auth = new HttpAuth([ 'user' => 'username', 'pass' => '123' ]); $auth->basic(); With Digest Auth In digest authentication, it is not necessary to inform anything in the constructor, just pass the allowed users with their respective passwords as a parameter in the digest method. use Solital\\Http\\Auth\\HttpAuth; $auth = new HttpAuth(); # 'username' => 'password' $auth->digest(['admin' => 'pass1', 'admin2' => 'pass2', ...]);","title":"HTTP Client"},{"location":"http-client/#requirements","text":"PHP 7.4 or PHP ^8.0 CURL extension enabled","title":"Requirements"},{"location":"http-client/#basic-use","text":"To make basic use of the component, you will need to instantiate the HttpClient class. Then, call the request function, passing the method (GET, POST, ...) and the url as a parameter. Then return the data. use Solital\\HttpClient; $client = new HttpClient(); $client->request(\"GET\", \"http://api.url.com\"); $res = $client->toJson(); pre($res);","title":"Basic use"},{"location":"http-client/#supported-methods","text":"HttpClient supports the methods below. GET POST PUT DELETE PATCH OPTIONS","title":"Supported methods"},{"location":"http-client/#return-types","text":"You can return the answer in json, array or object. The methods below show an example. $client = new HttpClient(); $client->request(\"GET\", \"http://api.url.com\"); /** Return json */ $res = $client->toJson(); /** Return array */ $res = $client->toArray(); /** Return object */ $res = $client->toObject(); pre($res);","title":"Return types"},{"location":"http-client/#sending-data","text":"If you are using a POST or PUT request, for example, and need to send data to the HTTP header, you can pass an array with the values in the request method. $client = new HttpClient(); $res = $client->request(\"PUT\", \"http://api.url.com\", [ 'data' => 'your_data_values' ])->toJson(); echo $res;","title":"Sending data"},{"location":"http-client/#custom-headers","text":"By default, HttpClient has the following headers: Content-Type: application/json Accept: application/json To add other headers to the request, use an array in the constructor on the instance. $headers = [ 'Content-Type: application/pdf' ]; $client = new HttpClient($headers); #...","title":"Custom Headers"},{"location":"http-client/#enabling-ssl-verification","text":"HttpClient by default does not perform SSL verification. To enable verification, use the enableSSL method. $client = new HttpClient(); $client->enableSSL(); #...","title":"Enabling SSL verification"},{"location":"http-client/#authentication","text":"","title":"Authentication"},{"location":"http-client/#basic-auth","text":"To perform authentication on an API that requires basic authentication, you can use the second parameter to inform the user and password. It is necessary to inform an array containing the indexes user and pass . $client = new HttpClient(null, [ 'user' => 'username', 'pass' => '123' ]); $client->request(\"GET\", \"http://api.url.com\"); $res = $client->toJson(); pre($res);","title":"Basic Auth"},{"location":"http-client/#securing-routes","text":"","title":"Securing routes"},{"location":"http-client/#with-basic-auth","text":"Basic authentication requires the username and password in the class constructor. If an index other than user and pass is informed, an exception will be thrown. You can protect your routes through basic authentication as shown below. use Solital\\Http\\Auth\\HttpAuth; $auth = new HttpAuth([ 'user' => 'username', 'pass' => '123' ]); $auth->basic();","title":"With Basic Auth"},{"location":"http-client/#with-digest-auth","text":"In digest authentication, it is not necessary to inform anything in the constructor, just pass the allowed users with their respective passwords as a parameter in the digest method. use Solital\\Http\\Auth\\HttpAuth; $auth = new HttpAuth(); # 'username' => 'password' $auth->digest(['admin' => 'pass1', 'admin2' => 'pass2', ...]);","title":"With Digest Auth"},{"location":"input/","text":"Solital offers libraries and helpers that makes it easy to manage and manipulate input-parameters like $_POST , $_GET and $_FILE . You can use the InputHandler class to easily access and manage parameters from your request. The InputHandler class offers extended features such as copying/moving uploaded files directly on the object, getting file-extension, mime-type etc. Get single parameter value input($index, $defaultValue, ...$methods); To quickly get a value from a parameter, you can use the input helper function. This will automatically trim the value and ensure that it's not empty. If it's empty the $defaultValue will be returned instead. Note: This function returns a string unless the parameters are grouped together, in that case it will return an array of values. Example: This example matches both POST and GET request-methods and if name is empty the default-value \"Guest\" will be returned. $name = input('name', 'Guest', 'post', 'get'); Get parameter object When dealing with file-uploads it can be useful to retrieve the raw parameter object. Search for object with default-value across multiple or specific request-methods: The example below will return an InputItem object if the parameter was found or return the $defaultValue . If parameters are grouped, it will return an array of InputItem objects. $object = input()->find($index, $defaultValue = null, ...$methods); Getting specific $_GET parameter as InputItem object: The example below will return an InputItem object if the parameter was found or return the $defaultValue . If parameters are grouped, it will return an array of InputItem objects. $object = input()->get($index, $defaultValue = null); Getting specific $_POST parameter as InputItem object: The example below will return an InputItem object if the parameter was found or return the $defaultValue . If parameters are grouped, it will return an array of InputItem objects. $object = input()->post($index, $defaultValue = null); Getting specific $_FILE parameter as InputFile object: The example below will return an InputFile object if the parameter was found or return the $defaultValue . If parameters are grouped, it will return an array of InputFile objects. $object = input()->file($index, $defaultValue = null); Managing files The UP_DIR constant is present in the config.php file. It defines the directory where your files will be stored. /** * From a form on the page like this * <input type=\"file\" name=\"images\" /> */ /* @var $image \\Solital\\Core\\Http\\Input\\InputFile */ /** * Only file */ $ext = input()->file('image')->getExtension(); $imgMain = 'IMG-'.uniqid().\".\".$ext; input()->file('image')->move(UP_DIR.'/fotos/'.$imgMain); /** * Loop through a collection of files uploaded from a form on the page like this * <input type=\"file\" name=\"images[]\" multiple /> */ /* @var $image \\Solital\\Core\\Http\\Input\\InputFile */ /** * Multiple files */ foreach ($photo as $photo) { $ext = $photo->getExtension(); $img = 'IMG-'.uniqid().\".\".$ext; $photo->move(UP_DIR.'/fotos/'.$img); } Get all parameters In array: # Get all $values = input()->all(); # Only match specific keys $values = input()->all([ 'company_name', 'user_id' ]); In JSON: $values = input()->getAllJson(); All object implements the InputItemInterface interface and will always contain these methods: getIndex() - returns the index/key of the input. getName() - returns a human friendly name for the input (company_name will be Company Name etc). getValue() - returns the value of the input. InputFile has the same methods as above along with some other file-specific methods like: getFilename - get the filename. getTmpName() - get file temporary name. getSize() - get file size. move($destination) - move file to destination. getContents() - get file content. getType() - get mime-type for file. getError() - get file upload error. hasError() - returns bool if an error occurred while uploading (if getError is not 0). toArray() - returns raw array","title":"Input and params"},{"location":"input/#get-single-parameter-value","text":"input($index, $defaultValue, ...$methods); To quickly get a value from a parameter, you can use the input helper function. This will automatically trim the value and ensure that it's not empty. If it's empty the $defaultValue will be returned instead. Note: This function returns a string unless the parameters are grouped together, in that case it will return an array of values. Example: This example matches both POST and GET request-methods and if name is empty the default-value \"Guest\" will be returned. $name = input('name', 'Guest', 'post', 'get');","title":"Get single parameter value"},{"location":"input/#get-parameter-object","text":"When dealing with file-uploads it can be useful to retrieve the raw parameter object. Search for object with default-value across multiple or specific request-methods: The example below will return an InputItem object if the parameter was found or return the $defaultValue . If parameters are grouped, it will return an array of InputItem objects. $object = input()->find($index, $defaultValue = null, ...$methods); Getting specific $_GET parameter as InputItem object: The example below will return an InputItem object if the parameter was found or return the $defaultValue . If parameters are grouped, it will return an array of InputItem objects. $object = input()->get($index, $defaultValue = null); Getting specific $_POST parameter as InputItem object: The example below will return an InputItem object if the parameter was found or return the $defaultValue . If parameters are grouped, it will return an array of InputItem objects. $object = input()->post($index, $defaultValue = null); Getting specific $_FILE parameter as InputFile object: The example below will return an InputFile object if the parameter was found or return the $defaultValue . If parameters are grouped, it will return an array of InputFile objects. $object = input()->file($index, $defaultValue = null);","title":"Get parameter object"},{"location":"input/#managing-files","text":"The UP_DIR constant is present in the config.php file. It defines the directory where your files will be stored. /** * From a form on the page like this * <input type=\"file\" name=\"images\" /> */ /* @var $image \\Solital\\Core\\Http\\Input\\InputFile */ /** * Only file */ $ext = input()->file('image')->getExtension(); $imgMain = 'IMG-'.uniqid().\".\".$ext; input()->file('image')->move(UP_DIR.'/fotos/'.$imgMain); /** * Loop through a collection of files uploaded from a form on the page like this * <input type=\"file\" name=\"images[]\" multiple /> */ /* @var $image \\Solital\\Core\\Http\\Input\\InputFile */ /** * Multiple files */ foreach ($photo as $photo) { $ext = $photo->getExtension(); $img = 'IMG-'.uniqid().\".\".$ext; $photo->move(UP_DIR.'/fotos/'.$img); }","title":"Managing files"},{"location":"input/#get-all-parameters","text":"In array: # Get all $values = input()->all(); # Only match specific keys $values = input()->all([ 'company_name', 'user_id' ]); In JSON: $values = input()->getAllJson(); All object implements the InputItemInterface interface and will always contain these methods: getIndex() - returns the index/key of the input. getName() - returns a human friendly name for the input (company_name will be Company Name etc). getValue() - returns the value of the input. InputFile has the same methods as above along with some other file-specific methods like: getFilename - get the filename. getTmpName() - get file temporary name. getSize() - get file size. move($destination) - move file to destination. getContents() - get file content. getType() - get mime-type for file. getError() - get file upload error. hasError() - returns bool if an error occurred while uploading (if getError is not 0). toArray() - returns raw array","title":"Get all parameters"},{"location":"installation/","text":"Installing via Composer To download Solital, use the command below: composer create-project solital/solital project It only takes a few lines of code to get started: Course::get('/', function() { return 'Hello world'; }); Running To execute the project, use the built-in PHP server or create a virtual host: php -S localhost:8000 -t public/","title":"Installing"},{"location":"installation/#installing-via-composer","text":"To download Solital, use the command below: composer create-project solital/solital project It only takes a few lines of code to get started: Course::get('/', function() { return 'Hello world'; });","title":"Installing via Composer"},{"location":"installation/#running","text":"To execute the project, use the built-in PHP server or create a virtual host: php -S localhost:8000 -t public/","title":"Running"},{"location":"json/","text":"You can manipulate JSON using the InputJson class or using the helpers encodeJSON and decodeJSON . The difference of this class for json_encode and json_decode is that you can automatically view errors when encoding/decoding a JSON, in addition to looking for a value within a JSON and reading external files. There are two ways to use this class, using the helpers mentioned above, or by instantiating the InputJson class. # Instantiating the InputJson class use Solital\\Core\\Http\\Input\\InputJson; $json = new InputJson(); # Using the helpers encodeJSON and decodeJSON encodeJSON($json); decodeJSON($json); Predefined Constants By default, the JSON_UNESCAPED_UNICODE constant is defined in the constructor of the InputJson class or the helper encodeJSON . It is possible to add more than one constant following the model below: # Class $json = new InputJson(JSON_HEX_TAG | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE); # Helper encodeJSON($json, JSON_HEX_TAG | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE); Encode JSON The encode method creates a JSON from an array, or use the encodeJSON helper. $array = [\"name\" => \"Adith\u00fda\", \"age\" => 20]; # Class $json = new Json(); $res = $json->encode($array); # Helper $res = encodeJSON($array); /* Return JSON */ pre($res); Decode JSON The decode method decodes JSON into an object or array. $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; # Class $json = new InputJson(); $res = $json->decode($json_file); # Helper $res = decodeJSON($json_file); /* Return object */ pre($res); To return an associative array, use true in the second parameter. $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; # Class $json = new InputJson(); $res = $json->decode($json_file, true); # Helper $res = decodeJSON($json_file, true); /* Return array */ pre($res); Returning a value in JSON If you need to read a value from the JSON file, use the inJson method. Inform JSON in the first parameter and the name of the key that contains the value in the second parameter. $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; $json = new InputJson(); $res = $json->inJson($json , 'Organization'); /* Return string */ pre($res); Read an external JSON file If you want to read an external file, use readFile . This method works in a similar way to the decode method. $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; $json = new InputJson(); $res = $json->readFile('data.json'); /* Return object */ pre($res); Returning in array $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; $json = new InputJson(); $res = $json->readFile('data.json', true); /* Return array */ pre($res); Returning errors A JSON containing the type of error is returned whenever there is a failure to code or decode a JSON. Below is an example of how it is returned: { \"json_error\": \"Syntax error\" }","title":"JSON"},{"location":"json/#predefined-constants","text":"By default, the JSON_UNESCAPED_UNICODE constant is defined in the constructor of the InputJson class or the helper encodeJSON . It is possible to add more than one constant following the model below: # Class $json = new InputJson(JSON_HEX_TAG | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE); # Helper encodeJSON($json, JSON_HEX_TAG | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE);","title":"Predefined Constants"},{"location":"json/#encode-json","text":"The encode method creates a JSON from an array, or use the encodeJSON helper. $array = [\"name\" => \"Adith\u00fda\", \"age\" => 20]; # Class $json = new Json(); $res = $json->encode($array); # Helper $res = encodeJSON($array); /* Return JSON */ pre($res);","title":"Encode JSON"},{"location":"json/#decode-json","text":"The decode method decodes JSON into an object or array. $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; # Class $json = new InputJson(); $res = $json->decode($json_file); # Helper $res = decodeJSON($json_file); /* Return object */ pre($res); To return an associative array, use true in the second parameter. $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; # Class $json = new InputJson(); $res = $json->decode($json_file, true); # Helper $res = decodeJSON($json_file, true); /* Return array */ pre($res);","title":"Decode JSON"},{"location":"json/#returning-a-value-in-json","text":"If you need to read a value from the JSON file, use the inJson method. Inform JSON in the first parameter and the name of the key that contains the value in the second parameter. $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; $json = new InputJson(); $res = $json->inJson($json , 'Organization'); /* Return string */ pre($res);","title":"Returning a value in JSON"},{"location":"json/#read-an-external-json-file","text":"If you want to read an external file, use readFile . This method works in a similar way to the decode method. $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; $json = new InputJson(); $res = $json->readFile('data.json'); /* Return object */ pre($res); Returning in array $json_file = '{\"Organization\": \"PHP Documentation Team\"}'; $json = new InputJson(); $res = $json->readFile('data.json', true); /* Return array */ pre($res);","title":"Read an external JSON file"},{"location":"json/#returning-errors","text":"A JSON containing the type of error is returned whenever there is a failure to code or decode a JSON. Below is an example of how it is returned: { \"json_error\": \"Syntax error\" }","title":"Returning errors"},{"location":"katrina/","text":"Getting Started Katrina ORM is a component to bring the object-oriented application development paradigm closer to the relational database paradigm. It helps when carrying out common routines, such as the famous CRUD (create, read, edit and delete), in addition to having a login and data paging system. Requirements PHP >= 7.2 (Compatible with PHP 8) PHP PDO extension enabled Installation Katrina ORM is already installed by default in Solital. But if you are going to install in another project, use the command below to download via Composer. composer require solital/katrina Settings In Solital: # DATABASE CONFIG DB_DRIVE=\"your_drive\" DB_HOST=\"your_host\" DB_NAME=\"your_database_name\" DB_USER=\"your_user\" DB_PASS=\"your_password\" In another project: define('DB_CONFIG', [ 'DRIVE' => 'your_drive', 'HOST' => 'your_host', 'DBNAME' => 'your_database_name', 'USER' => 'your_user', 'PASS' => 'your_password' ]); For SQLite Some differences exist for connecting to an SQLite database. First, add an additional index called SQLITE_DIR in the DB_CONFIG constant. This constant must have the absolute path where the SQLite database file will be located. Then, assign the value sqlite in the index DRIVE . define('DB_CONFIG', [ 'DRIVE' => 'sqlite', 'DBNAME' => 'your_database_name.db', 'SQLITE_DIR' => '/path/to/file/' ]); In Solital: # DATABASE CONFIG DB_DRIVE=\"your_drive\" DB_HOST=\"your_host\" DB_NAME=\"your_database_name\" DB_USER=\"your_user\" DB_PASS=\"your_password\" SQLITE_DIR=\"/path/to/file/\" Initial structure You can use katrina in two ways: 1\u00b0) In Solital, extend the model already created and define the variables $table , $primaryKey and $columns in your model's constructor as listed below: <?php namespace Solital\\Components\\Model; use Solital\\Components\\Model\\Model; class User extends Model { public function __construct() { $this->table = 'your_database_table'; $this->primaryKey = 'primary_key_of_the_table'; $this->columns = [ 'first_column_of_the_table', 'second column of the table', #... ]; } public function get() { return $this->instance()->select()->build(\"ALL\"); } } 2\u00b0) Or if you are using it in another project <?php use Katrina\\Katrina as Katrina; class User { # String private $table = 'your_database_table'; # String private $primaryKey = 'primary_key_of_the_table'; # Array private $columns = [ 'first_column_of_the_table', 'second column of the table', #... ]; public function instance() { $katrina = new Katrina($this->table, $this->columnPrimaryKey, $this->columns); return $katrina; } public function get() { return $this->instance()->select()->build(\"ALL\"); } } Data manipulation - CRUD List To list all fields in the table, use select() as shown in the previous example. By default, the method will list all fields in the table. public function get() { return $this->instance()->select()->build(\"ALL\"); } To list a single value, pass the table field id as a parameter, and in build() method use ONLY . public function get() { return $this->instance()->select(3)->build(\"ONLY\"); } To specify which fields you want to list, pass the values \u200b\u200bas parameters. public function get() { return $this->instance()->select(null, null, \"name, city, country\")->build(\"ALL\"); } WHERE If you need the WHERE clause, use the second parameter. public function get() { return $this->instance()->select(null, 'name=\"Clark\"', \"name, city, country\") ->build(\"ALL\"); } With primary key: public function get() { return $this->instance()->select(3, 'name=\"Clark\"', \"name, city, country\") ->build(\"ONLY\"); } LIMIT public function get() { return $this->instance()->select()->limit(2, 5)->build(\"ALL\"); } LIKE The LIKE operator must always be used with the WHERE . public function get() { return $this->instance()->select(null, \"name\")->like(\"%Harvey%\")->build(\"ALL\"); } ORDER BY public function get() { return $this->instance()->select()->order(\"name\")->build(\"ALL\"); } By default, the result will always return ascending. To return values descending, use false in the second parameter. public function get() { return $this->instance()->select()->order(\"name\", false)->build(\"ALL\"); } BETWEEN The BETWEEN operator must always be used with the WHERE . public function get() { return $this->instance()->select(null, \"age\")->between(18, 25)->build(\"ALL\"); } Listing foreign key The innerJoin() method returns the values of two tables that have a foreign key. The first parameter will be the name of the table that has a relationship with the current table. The second will be an array containing in the first index the column name of the current table that has the foreign key, and in the second index the column name of the primary key of the other table. To make it easier, see an example below. public function get() { return $this->instance()->innerJoin(\"address\", [\"idForeignAddress\", \"idAddress\"]) ->build(\"ALL\"); } If you need to use the WHERE clause, pass the command in the third parameter as shown below. public function get() { return $this->instance()->innerJoin(\"address\", [\"idForeignAddress\", \"idAddress\"], \"order_status=true\")->build(\"ALL\"); } You can inform which fields you want to return. \"a\" is your main table while \"b\" is your table that has the foreign key. public function get() { return $this->instance()->innerJoin(\"address\", [\"idForeignAddress\", \"idAddress\"], \"order_status=true\", \"a.idPerson, a.name, b.street\", \"address\", \"idAddress\")->build(\"ALL\"); } Custom SELECT You can create a custom SELECT statement. To do this, use the function customQueryOnly to return a single value from the database, and customQueryAll to return all values from the database. public function getAll() { return $this->instance()->customQueryAll(\"SELECT a.idSession, SUM(b.price) AS price, SUM(a.qtd) AS qtd FROM tb_order a INNER JOIN tb_product b WHERE MONTH( a.created_at) = MONTH(NOW()) GROUP BY a.idSession\"); } public function getOnly() { return $this->instance()->customQueryOnly(\"SELECT a.idSession, SUM(b.price) AS price, SUM(a.qtd) AS qtd FROM tb_order a INNER JOIN tb_product b WHERE MONTH( a.created_at) = MONTH(NOW()) GROUP BY a.idSession\"); } Insert The insert() method inserts the values \u200b\u200binto the table. It is NOT necessary to use build() method to insert the data. To do this, create an array with the values \u200b\u200bthat the method will receive /** * Return bool */ public function insert() { $res = $this->instance()->insert(['Clark', 'Metropolis', 'EUA']); return $res; } To return the last insert ID, pass a true in the second parameter. /** * Return array * * ['res'] => 'true', * ['lastId'] => '2' */ public function insert() { $res = $this->instance()->insert(['Clark', 'Metropolis', 'EUA'], true); return $res; } Update The update() method updates the values \u200b\u200bin the table. It is NOT necessary to use build() method to update the data. The process is similar to the insert method. The first parameter is the columns that will be updated, the second parameter the values \u200b\u200band the third the row id . You can use an integer or a string in the third parameter public function update() { $res = $this->instance()->update(['name', 'age'], ['Specter', '41'], \"id=3\"); return $res; } Or public function update() { $res = $this->instance()->update(['name', 'age'], ['Specter', '41'], 3); return $res; } Delete The delete() method deletes the values \u200b\u200bin the table. Enter the value of the line to be deleted, the value being the primary key. public function delete() { $res = $this->instance()->delete(3)->build(); return $res; } Or a string public function delete() { $res = $this->instance()->delete(\"Bruce\")->build(); return $res; } By default, the delete method uses the column name of the primary key to delete the row, but you can use the name of another column using the second parameter. public function delete() { $res = $this->instance()->delete(\"Bruce\", \"name\")->build(); return $res; } Force delete with foreign key In some cases there may be a need to delete a record with the foreign key from another table. To disable foreign key checking, you can use the third parameter as true . public function delete() { $res = $this->instance()->delete(3, null, true)->build(); return $res; } Manipulating tables Create a new table The createTable() method starts opening the table. After inserting the fields and data types that the tables will have, use closeTable() to close the table. For a better understanding see the syntax below. $res = $this->instance() /* Starts the table by specifying its name */ ->createTable(\"your_table_name\") /* Fields and table type */ ->int(\"id_orm\")->primary()->increment() ->varchar(\"name\", 20)->unique()->notNull()->default(\"specter\") ->int(\"age\", 3)->unsigned()->notNull() ->varchar(\"email\", 30)->default(\"harvey.specter@gmail.com\")->notNull() ->varchar(\"profession\", 40) ->int(\"tipo\") ->constraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\") /* Close the command to create the table */ ->closeTable() /* Compile the code above */ ->build(); List tables To have a list of all the tables in your database, use the listTables() method by passing ALL in the build() method. public function get() { $res = $this->instance()->listTables()->build(\"ALL\"); return $res; } List columns To list the columns of a table, use the describeTable() method passing as a parameter the name of your table together with ALL in the build() public function get() { $res = $this->instance()->describeTable(\"your_table\")->build(\"ALL\"); return $res; } Alter table The alter() method performs the procedures of adding, changing and deleting a field from the database table. Add new field Use add() method together with the data type to add a new field. public function get() { $res = $this->instance() ->alter(\"message\")->add() ->varchar(\"first_field\", 10) ->build(); } Drop column Use the drop() method to delete a column from the table. public function get() { $res = $this->instance() ->alter(\"message\")->drop(\"type\") ->build(); } Modify column Use the modify SQL with the modify() method. public function get() { $res = $this->instance() ->alter(\"message\")->modify() ->varchar(\"person_type\", 100) ->build(); } Change column Use the change() method to change a column. As a parameter, pass the current column name. public function get() { $res = $this->instance() ->alter(\"message\")->change(\"person_type\") ->varchar(\"type\", 100) ->build(); } Rename table Use the rename() method to rename a database table. Use the first parameter the current table name and the second parameter the new table name. public function get() { $res = $this->instance() ->rename(\"message\", \"new_message\") ->build(); } Adding foreign key To add a foreign key to an already created table, use the addConstraint() method to add a constraint; foreign() to inform the column and references() to refer to the table. public function get() { $res = $this->instance() ->alter(\"message\")->addConstraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\") ->build(); } NOTE: if you are creating a new table, use the constraint() method instead of addConstraint() as shown below: #... ->constraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\") #... Drop table To delete a table from the database, use the dropTable() method. public function get() { $res = $this->instance() ->dropTable(\"message\") ->build(); } Truncate table To use the sql truncate command, use the truncate() method. public function get() { $res = $this->instance() ->truncate() ->build(); } By default, the database checks the table's foreign key and locks the truncate command. To disable foreign key verification, enter true as a parameter. public function get() { $res = $this->instance() ->truncate(true) ->build(); } Procedure To call a database procedure, use the call() method. public function get() { $res = $this->instance()->call('procedure_name'); return $res; } To use procedure parameters, pass the values in array format. public function get() { $res = $this->instance()->call('procedure_name' , ['param_1, param_2, param_3']); return $res; } Pagination The pagination() method creates a system for paging results. To initialize, the first parameter must be the table you want to use to start paging. The second parameter will list the amount of values that will be returned from the table as shown in the example below. public function get() { $res = $this->instance()->pagination('your_table', 3); return $res; } The above method will return an array containing rows indexes that will return values, and arrows that will return commands for pagination. To use pagination with relationship in another table, in the third parameter pass an array containing the name of the table that has a relationship with the current table, the column name of the current table that has the foreign key and the column name of the primary key of the another table. public function get() { $res = $this->instance()->pagination('your_table', 3, ['foreign_table', 'column_foreign_key', 'column_primary_key']); return $res; } INNER JOIN If you want to use pagination with a table that has a foreign key, pass an array in the third parameter. In the first index, insert the name of the table that is linked to the current table, in the second index the name of the column that contains the foreign key and in the third index the column name of the primary key of the table that references the current table public function get() { $res = $this->instance()->pagination('your_table', 3, ['foreign_table', 'column_foreign_key', 'column_primary_key'], \"status=true\"); return $res; } WHERE clause To use the WHERE clause, use the fourth parameter as shown below. public function get() { $res = $this->instance()->pagination('your_table', 3, null, \"status=true\"); return $res; } Wolf Templte To use in the Wolf template, use it this way. $html = $this->instance()->pagination('your_table', 3); Wolf::loadView('home', [ 'rows' => $html['rows'], 'arrows' => $html['arrows'] ]); And in your view, return the results that way. <table> <thead> <tr> <th>Name</th> <th>Age</th> <th>Gender</th> </tr> </thead> <tbody> <?php foreach ($rows as $r): ?> <tr> <td><?= $r['name'] ?></td> <td><?= $r['age'] ?></td> <td><?= $r['gender'] ?></td> </tr> <?php endforeach; ?> </tbody> </table> <?php echo $arrows; The result will be as follows: Name Age Gender Sam 47 Male Dean 49 Male Marry 52 Female << 1 2 3 >> To change the arrows ( << and >> ), use the last two parameters of the pagination() method. The result will be: public function get() { $res = $this->instance()->pagination('your_table', 3, null, null, \"First\", \"Last\"); return $res; } Name Age Gender Sam 47 Male Dean 49 Male Marry 52 Female First 1 2 3 Last Custom Pagination If you have a very complex SELECT statement, you can use the customPagination method. This method already has a LIMIT by default, in addition to being able to change the name of the arrows. public function get() { $res = $this->instance()->customPagination(\"SELECT created_at, order_status, idSession, SUM(idOrder) AS idOrder FROM `tb_order` GROUP BY created_at, order_status, idSession\", 3, \"First\", \"Last\"); return $res; } Customizing arrows CSS You can customize the look of the arrows through the classes pagination_first_item , pagination_atual_item , pagination_others_itens and pagination_last_item . Below is a customization to serve as an example: .pagination_atual_item { background-color: #B5B5B5; padding: 10px; margin: 5px; border-radius: 5px; margin-top: 30px; transition: 0.2s; } .pagination_first_item, .pagination_others_itens, .pagination_last_item { background-color: #4682B4; color: #FFF; padding: 10px; margin: 5px; border-radius: 5px; margin-top: 30px; transition: 0.2s; } .pagination_first_item:hover, .pagination_others_itens:hover, .pagination_last_item:hover { background-color: #0071E3; color: #FFF !important; transition: 0.2s; } Types of data Below is listed the attributes and data supported by Katrina ORM: String data Types varchar(\"column_name\", size) char(\"column_name\", size) tinytext(\"column_name\", size) mediumtext(\"column_name\", size) longtext(\"column_name\", size) text(\"column_name\") Numerical data Types tinyint(\"column_name\", size) smallint(\"column_name\", size) mediumint(\"column_name\", size) bigint(\"column_name\", size) int(\"column_name\", size) decimal(\"column_name\", value1, value2) Date and time Types date(\"column_name\") year(\"column_name\") time(\"column_name\") datetime(\"column_name\") timestamp(\"column_name\") Boolean Types boolean(\"column_name\") Attributes Types default(\"default_value\") unique() unsigned() incremet() notNull() primary() after(\"column_name\") first()","title":"Katrina ORM"},{"location":"katrina/#getting-started","text":"Katrina ORM is a component to bring the object-oriented application development paradigm closer to the relational database paradigm. It helps when carrying out common routines, such as the famous CRUD (create, read, edit and delete), in addition to having a login and data paging system.","title":"Getting Started"},{"location":"katrina/#requirements","text":"PHP >= 7.2 (Compatible with PHP 8) PHP PDO extension enabled","title":"Requirements"},{"location":"katrina/#installation","text":"Katrina ORM is already installed by default in Solital. But if you are going to install in another project, use the command below to download via Composer. composer require solital/katrina","title":"Installation"},{"location":"katrina/#settings","text":"In Solital: # DATABASE CONFIG DB_DRIVE=\"your_drive\" DB_HOST=\"your_host\" DB_NAME=\"your_database_name\" DB_USER=\"your_user\" DB_PASS=\"your_password\" In another project: define('DB_CONFIG', [ 'DRIVE' => 'your_drive', 'HOST' => 'your_host', 'DBNAME' => 'your_database_name', 'USER' => 'your_user', 'PASS' => 'your_password' ]);","title":"Settings"},{"location":"katrina/#for-sqlite","text":"Some differences exist for connecting to an SQLite database. First, add an additional index called SQLITE_DIR in the DB_CONFIG constant. This constant must have the absolute path where the SQLite database file will be located. Then, assign the value sqlite in the index DRIVE . define('DB_CONFIG', [ 'DRIVE' => 'sqlite', 'DBNAME' => 'your_database_name.db', 'SQLITE_DIR' => '/path/to/file/' ]); In Solital: # DATABASE CONFIG DB_DRIVE=\"your_drive\" DB_HOST=\"your_host\" DB_NAME=\"your_database_name\" DB_USER=\"your_user\" DB_PASS=\"your_password\" SQLITE_DIR=\"/path/to/file/\"","title":"For SQLite"},{"location":"katrina/#initial-structure","text":"You can use katrina in two ways: 1\u00b0) In Solital, extend the model already created and define the variables $table , $primaryKey and $columns in your model's constructor as listed below: <?php namespace Solital\\Components\\Model; use Solital\\Components\\Model\\Model; class User extends Model { public function __construct() { $this->table = 'your_database_table'; $this->primaryKey = 'primary_key_of_the_table'; $this->columns = [ 'first_column_of_the_table', 'second column of the table', #... ]; } public function get() { return $this->instance()->select()->build(\"ALL\"); } } 2\u00b0) Or if you are using it in another project <?php use Katrina\\Katrina as Katrina; class User { # String private $table = 'your_database_table'; # String private $primaryKey = 'primary_key_of_the_table'; # Array private $columns = [ 'first_column_of_the_table', 'second column of the table', #... ]; public function instance() { $katrina = new Katrina($this->table, $this->columnPrimaryKey, $this->columns); return $katrina; } public function get() { return $this->instance()->select()->build(\"ALL\"); } }","title":"Initial structure"},{"location":"katrina/#data-manipulation-crud","text":"","title":"Data manipulation - CRUD"},{"location":"katrina/#list","text":"To list all fields in the table, use select() as shown in the previous example. By default, the method will list all fields in the table. public function get() { return $this->instance()->select()->build(\"ALL\"); } To list a single value, pass the table field id as a parameter, and in build() method use ONLY . public function get() { return $this->instance()->select(3)->build(\"ONLY\"); } To specify which fields you want to list, pass the values \u200b\u200bas parameters. public function get() { return $this->instance()->select(null, null, \"name, city, country\")->build(\"ALL\"); } WHERE If you need the WHERE clause, use the second parameter. public function get() { return $this->instance()->select(null, 'name=\"Clark\"', \"name, city, country\") ->build(\"ALL\"); } With primary key: public function get() { return $this->instance()->select(3, 'name=\"Clark\"', \"name, city, country\") ->build(\"ONLY\"); } LIMIT public function get() { return $this->instance()->select()->limit(2, 5)->build(\"ALL\"); } LIKE The LIKE operator must always be used with the WHERE . public function get() { return $this->instance()->select(null, \"name\")->like(\"%Harvey%\")->build(\"ALL\"); } ORDER BY public function get() { return $this->instance()->select()->order(\"name\")->build(\"ALL\"); } By default, the result will always return ascending. To return values descending, use false in the second parameter. public function get() { return $this->instance()->select()->order(\"name\", false)->build(\"ALL\"); } BETWEEN The BETWEEN operator must always be used with the WHERE . public function get() { return $this->instance()->select(null, \"age\")->between(18, 25)->build(\"ALL\"); }","title":"List"},{"location":"katrina/#listing-foreign-key","text":"The innerJoin() method returns the values of two tables that have a foreign key. The first parameter will be the name of the table that has a relationship with the current table. The second will be an array containing in the first index the column name of the current table that has the foreign key, and in the second index the column name of the primary key of the other table. To make it easier, see an example below. public function get() { return $this->instance()->innerJoin(\"address\", [\"idForeignAddress\", \"idAddress\"]) ->build(\"ALL\"); } If you need to use the WHERE clause, pass the command in the third parameter as shown below. public function get() { return $this->instance()->innerJoin(\"address\", [\"idForeignAddress\", \"idAddress\"], \"order_status=true\")->build(\"ALL\"); } You can inform which fields you want to return. \"a\" is your main table while \"b\" is your table that has the foreign key. public function get() { return $this->instance()->innerJoin(\"address\", [\"idForeignAddress\", \"idAddress\"], \"order_status=true\", \"a.idPerson, a.name, b.street\", \"address\", \"idAddress\")->build(\"ALL\"); }","title":"Listing foreign key"},{"location":"katrina/#custom-select","text":"You can create a custom SELECT statement. To do this, use the function customQueryOnly to return a single value from the database, and customQueryAll to return all values from the database. public function getAll() { return $this->instance()->customQueryAll(\"SELECT a.idSession, SUM(b.price) AS price, SUM(a.qtd) AS qtd FROM tb_order a INNER JOIN tb_product b WHERE MONTH( a.created_at) = MONTH(NOW()) GROUP BY a.idSession\"); } public function getOnly() { return $this->instance()->customQueryOnly(\"SELECT a.idSession, SUM(b.price) AS price, SUM(a.qtd) AS qtd FROM tb_order a INNER JOIN tb_product b WHERE MONTH( a.created_at) = MONTH(NOW()) GROUP BY a.idSession\"); }","title":"Custom SELECT"},{"location":"katrina/#insert","text":"The insert() method inserts the values \u200b\u200binto the table. It is NOT necessary to use build() method to insert the data. To do this, create an array with the values \u200b\u200bthat the method will receive /** * Return bool */ public function insert() { $res = $this->instance()->insert(['Clark', 'Metropolis', 'EUA']); return $res; } To return the last insert ID, pass a true in the second parameter. /** * Return array * * ['res'] => 'true', * ['lastId'] => '2' */ public function insert() { $res = $this->instance()->insert(['Clark', 'Metropolis', 'EUA'], true); return $res; }","title":"Insert"},{"location":"katrina/#update","text":"The update() method updates the values \u200b\u200bin the table. It is NOT necessary to use build() method to update the data. The process is similar to the insert method. The first parameter is the columns that will be updated, the second parameter the values \u200b\u200band the third the row id . You can use an integer or a string in the third parameter public function update() { $res = $this->instance()->update(['name', 'age'], ['Specter', '41'], \"id=3\"); return $res; } Or public function update() { $res = $this->instance()->update(['name', 'age'], ['Specter', '41'], 3); return $res; }","title":"Update"},{"location":"katrina/#delete","text":"The delete() method deletes the values \u200b\u200bin the table. Enter the value of the line to be deleted, the value being the primary key. public function delete() { $res = $this->instance()->delete(3)->build(); return $res; } Or a string public function delete() { $res = $this->instance()->delete(\"Bruce\")->build(); return $res; } By default, the delete method uses the column name of the primary key to delete the row, but you can use the name of another column using the second parameter. public function delete() { $res = $this->instance()->delete(\"Bruce\", \"name\")->build(); return $res; } Force delete with foreign key In some cases there may be a need to delete a record with the foreign key from another table. To disable foreign key checking, you can use the third parameter as true . public function delete() { $res = $this->instance()->delete(3, null, true)->build(); return $res; }","title":"Delete"},{"location":"katrina/#manipulating-tables","text":"","title":"Manipulating tables"},{"location":"katrina/#create-a-new-table","text":"The createTable() method starts opening the table. After inserting the fields and data types that the tables will have, use closeTable() to close the table. For a better understanding see the syntax below. $res = $this->instance() /* Starts the table by specifying its name */ ->createTable(\"your_table_name\") /* Fields and table type */ ->int(\"id_orm\")->primary()->increment() ->varchar(\"name\", 20)->unique()->notNull()->default(\"specter\") ->int(\"age\", 3)->unsigned()->notNull() ->varchar(\"email\", 30)->default(\"harvey.specter@gmail.com\")->notNull() ->varchar(\"profession\", 40) ->int(\"tipo\") ->constraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\") /* Close the command to create the table */ ->closeTable() /* Compile the code above */ ->build();","title":"Create a new table"},{"location":"katrina/#list-tables","text":"To have a list of all the tables in your database, use the listTables() method by passing ALL in the build() method. public function get() { $res = $this->instance()->listTables()->build(\"ALL\"); return $res; }","title":"List tables"},{"location":"katrina/#list-columns","text":"To list the columns of a table, use the describeTable() method passing as a parameter the name of your table together with ALL in the build() public function get() { $res = $this->instance()->describeTable(\"your_table\")->build(\"ALL\"); return $res; }","title":"List columns"},{"location":"katrina/#alter-table","text":"The alter() method performs the procedures of adding, changing and deleting a field from the database table. Add new field Use add() method together with the data type to add a new field. public function get() { $res = $this->instance() ->alter(\"message\")->add() ->varchar(\"first_field\", 10) ->build(); } Drop column Use the drop() method to delete a column from the table. public function get() { $res = $this->instance() ->alter(\"message\")->drop(\"type\") ->build(); } Modify column Use the modify SQL with the modify() method. public function get() { $res = $this->instance() ->alter(\"message\")->modify() ->varchar(\"person_type\", 100) ->build(); } Change column Use the change() method to change a column. As a parameter, pass the current column name. public function get() { $res = $this->instance() ->alter(\"message\")->change(\"person_type\") ->varchar(\"type\", 100) ->build(); } Rename table Use the rename() method to rename a database table. Use the first parameter the current table name and the second parameter the new table name. public function get() { $res = $this->instance() ->rename(\"message\", \"new_message\") ->build(); }","title":"Alter table"},{"location":"katrina/#adding-foreign-key","text":"To add a foreign key to an already created table, use the addConstraint() method to add a constraint; foreign() to inform the column and references() to refer to the table. public function get() { $res = $this->instance() ->alter(\"message\")->addConstraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\") ->build(); } NOTE: if you are creating a new table, use the constraint() method instead of addConstraint() as shown below: #... ->constraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\") #...","title":"Adding foreign key"},{"location":"katrina/#drop-table","text":"To delete a table from the database, use the dropTable() method. public function get() { $res = $this->instance() ->dropTable(\"message\") ->build(); }","title":"Drop table"},{"location":"katrina/#truncate-table","text":"To use the sql truncate command, use the truncate() method. public function get() { $res = $this->instance() ->truncate() ->build(); } By default, the database checks the table's foreign key and locks the truncate command. To disable foreign key verification, enter true as a parameter. public function get() { $res = $this->instance() ->truncate(true) ->build(); }","title":"Truncate table"},{"location":"katrina/#procedure","text":"To call a database procedure, use the call() method. public function get() { $res = $this->instance()->call('procedure_name'); return $res; } To use procedure parameters, pass the values in array format. public function get() { $res = $this->instance()->call('procedure_name' , ['param_1, param_2, param_3']); return $res; }","title":"Procedure"},{"location":"katrina/#pagination","text":"The pagination() method creates a system for paging results. To initialize, the first parameter must be the table you want to use to start paging. The second parameter will list the amount of values that will be returned from the table as shown in the example below. public function get() { $res = $this->instance()->pagination('your_table', 3); return $res; } The above method will return an array containing rows indexes that will return values, and arrows that will return commands for pagination. To use pagination with relationship in another table, in the third parameter pass an array containing the name of the table that has a relationship with the current table, the column name of the current table that has the foreign key and the column name of the primary key of the another table. public function get() { $res = $this->instance()->pagination('your_table', 3, ['foreign_table', 'column_foreign_key', 'column_primary_key']); return $res; } INNER JOIN If you want to use pagination with a table that has a foreign key, pass an array in the third parameter. In the first index, insert the name of the table that is linked to the current table, in the second index the name of the column that contains the foreign key and in the third index the column name of the primary key of the table that references the current table public function get() { $res = $this->instance()->pagination('your_table', 3, ['foreign_table', 'column_foreign_key', 'column_primary_key'], \"status=true\"); return $res; } WHERE clause To use the WHERE clause, use the fourth parameter as shown below. public function get() { $res = $this->instance()->pagination('your_table', 3, null, \"status=true\"); return $res; } Wolf Templte To use in the Wolf template, use it this way. $html = $this->instance()->pagination('your_table', 3); Wolf::loadView('home', [ 'rows' => $html['rows'], 'arrows' => $html['arrows'] ]); And in your view, return the results that way. <table> <thead> <tr> <th>Name</th> <th>Age</th> <th>Gender</th> </tr> </thead> <tbody> <?php foreach ($rows as $r): ?> <tr> <td><?= $r['name'] ?></td> <td><?= $r['age'] ?></td> <td><?= $r['gender'] ?></td> </tr> <?php endforeach; ?> </tbody> </table> <?php echo $arrows; The result will be as follows: Name Age Gender Sam 47 Male Dean 49 Male Marry 52 Female << 1 2 3 >> To change the arrows ( << and >> ), use the last two parameters of the pagination() method. The result will be: public function get() { $res = $this->instance()->pagination('your_table', 3, null, null, \"First\", \"Last\"); return $res; } Name Age Gender Sam 47 Male Dean 49 Male Marry 52 Female First 1 2 3 Last","title":"Pagination"},{"location":"katrina/#custom-pagination","text":"If you have a very complex SELECT statement, you can use the customPagination method. This method already has a LIMIT by default, in addition to being able to change the name of the arrows. public function get() { $res = $this->instance()->customPagination(\"SELECT created_at, order_status, idSession, SUM(idOrder) AS idOrder FROM `tb_order` GROUP BY created_at, order_status, idSession\", 3, \"First\", \"Last\"); return $res; } Customizing arrows CSS You can customize the look of the arrows through the classes pagination_first_item , pagination_atual_item , pagination_others_itens and pagination_last_item . Below is a customization to serve as an example: .pagination_atual_item { background-color: #B5B5B5; padding: 10px; margin: 5px; border-radius: 5px; margin-top: 30px; transition: 0.2s; } .pagination_first_item, .pagination_others_itens, .pagination_last_item { background-color: #4682B4; color: #FFF; padding: 10px; margin: 5px; border-radius: 5px; margin-top: 30px; transition: 0.2s; } .pagination_first_item:hover, .pagination_others_itens:hover, .pagination_last_item:hover { background-color: #0071E3; color: #FFF !important; transition: 0.2s; }","title":"Custom Pagination"},{"location":"katrina/#types-of-data","text":"Below is listed the attributes and data supported by Katrina ORM: String data Types varchar(\"column_name\", size) char(\"column_name\", size) tinytext(\"column_name\", size) mediumtext(\"column_name\", size) longtext(\"column_name\", size) text(\"column_name\") Numerical data Types tinyint(\"column_name\", size) smallint(\"column_name\", size) mediumint(\"column_name\", size) bigint(\"column_name\", size) int(\"column_name\", size) decimal(\"column_name\", value1, value2) Date and time Types date(\"column_name\") year(\"column_name\") time(\"column_name\") datetime(\"column_name\") timestamp(\"column_name\") Boolean Types boolean(\"column_name\") Attributes Types default(\"default_value\") unique() unsigned() incremet() notNull() primary() after(\"column_name\") first()","title":"Types of data"},{"location":"log/","text":"Logger is a powerful PSR-3 logger for PHP that is simple to use. Simplicity is achieved by providing great defaults. No options to configure! Yet flexible enough to meet most logging needs. And if your application's logging needs expand beyond what Logger provides, since it implements PSR-3, you can drop in another great PSR-3 logger like MonoLog in its place when the time comes with minimal changes. Made by markrogoyski Simple 20-Second Getting-Started Tutorial use Solital\\Core\\Resource\\Logger; $channel = 'events'; $logger = new Logger($channel); $logger->info('Logger really is simple.'); That's it! Your application is logging! Extended Example use Solital\\Core\\Resource\\Logger; $channel = 'billing'; $logger = new Logger($channel); $logger->info('Begin process that usually fails.', ['process' => 'invoicing', 'user' => $user]); try { invoiceUser($user); // This usually fails } catch (\\Exception $e) { $logger->error('Billing failure.', ['process' => 'invoicing', 'user' => $user, 'exception' => $e]); } Logger output 2017-02-13 00:35:55.426630 [info] [billing] [pid:17415] Begin process that usually fails. {\"process\":\"invoicing\",\"user\":\"bob\"} {} 2017-02-13 00:35:55.430071 [error] [billing] [pid:17415] Billing failure. {\"process\":\"invoicing\",\"user\":\"bob\"} {\"message\":\"Could not process invoice.\",\"code\":0,\"file\":\"/path/to/app.php\",\"line\":20,\"trace\":[{\"file\":\"/path/to/app.php\",\"line\":13,\"function\":\"invoiceUser\",\"args\":[\"mark\"]}]} Log Output Log lines have the following format: YYYY-mm-dd HH:ii:ss.uuuuuu [loglevel] [channel] [pid:##] Log message content {\"Optional\":\"JSON Contextual Support Data\"} {\"Optional\":\"Exception Data\"} Log lines are easily readable and parsable. Log lines are always on a single line. Fields are tab separated. Log Levels Logger has eight log level severities based on PSR Log Levels . $logger->debug('Detailed information about the application run.'); $logger->info('Informational messages about the application run.'); $logger->notice('Normal but significant events.'); $logger->warning('Information that something potentially bad has occured.'); $logger->error('Runtime error that should be monitored.'); $logger->critical('A service is unavailable or unresponsive.'); $logger->alert('The entire site is down.'); $logger->emergency('The Web site is on fire.'); By default all log levels are logged. The minimum log level can be changed in two ways: * Optional constructor parameter * Setter method at any time use Solital\\Core\\Resource\\Logger; use Psr\\Log\\LogLevel; // Optional constructor Parameter (Only error and above are logged [error, critical, alert, emergency]) $logger = new Logger($logfile, $channel, LogLevel::ERROR); // Setter method (Only warning and above are logged) $logger->setLogLevel(LogLevel::WARNING); Contextual Data Logger enables logging best practices to have general-use log messages with contextual support data to give context to the message. The second argument to a log message is an associative array of key-value pairs that will log as a JSON string, serving as the contextual support data to the log message. // Add context to a Web request. $log->info('Web request initiated', ['method' => 'GET', 'endpoint' => 'user/account', 'queryParameters' => 'id=1234']); // Add context to a disk space warning. $log->warning('Free space is below safe threshold.', ['volume' => '/var/log', 'availablePercent' => 4]); Logging Exceptions Exceptions are logged with the contextual data using the key exception and the value the exception variable. catch (\\Exception $e) { $logger->error('Something exceptional has happened', ['exception' => $e]); } Log Channels Think of channels as namespaces for log lines. If you want to have multiple loggers or applications logging to a single log file, channels are your friend. Channels can be set in two ways: * Constructor parameter * Setter method at any time use Solital\\Core\\Resource\\Logger; // Constructor Parameter $channel = 'router'; $logger = new Logger($logfile, $channel); // Setter method $logger->setChannel('database'); Debug Features Logging to STDOUT When developing, you can turn on log output to the screen (STDOUT) as a convenience. $logger->setOutput(true); $logger->debug('This will get logged to STDOUT as well as the log file.'); Dummy Logger Suppose you need a logger to meet an injected dependency during a unit test, and you don't want it to actually log anything. You can set the log level to Logger::LOG_LEVEL_NONE which won't log at any level. use Solital\\Core\\Resource\\Logger; $logger->setLogLevel(Logger::LOG_LEVEL_NONE); $logger->info('This will not log to a file.');","title":"Logger"},{"location":"log/#simple-20-second-getting-started-tutorial","text":"use Solital\\Core\\Resource\\Logger; $channel = 'events'; $logger = new Logger($channel); $logger->info('Logger really is simple.'); That's it! Your application is logging!","title":"Simple 20-Second Getting-Started Tutorial"},{"location":"log/#extended-example","text":"use Solital\\Core\\Resource\\Logger; $channel = 'billing'; $logger = new Logger($channel); $logger->info('Begin process that usually fails.', ['process' => 'invoicing', 'user' => $user]); try { invoiceUser($user); // This usually fails } catch (\\Exception $e) { $logger->error('Billing failure.', ['process' => 'invoicing', 'user' => $user, 'exception' => $e]); } Logger output 2017-02-13 00:35:55.426630 [info] [billing] [pid:17415] Begin process that usually fails. {\"process\":\"invoicing\",\"user\":\"bob\"} {} 2017-02-13 00:35:55.430071 [error] [billing] [pid:17415] Billing failure. {\"process\":\"invoicing\",\"user\":\"bob\"} {\"message\":\"Could not process invoice.\",\"code\":0,\"file\":\"/path/to/app.php\",\"line\":20,\"trace\":[{\"file\":\"/path/to/app.php\",\"line\":13,\"function\":\"invoiceUser\",\"args\":[\"mark\"]}]}","title":"Extended Example"},{"location":"log/#log-output","text":"Log lines have the following format: YYYY-mm-dd HH:ii:ss.uuuuuu [loglevel] [channel] [pid:##] Log message content {\"Optional\":\"JSON Contextual Support Data\"} {\"Optional\":\"Exception Data\"} Log lines are easily readable and parsable. Log lines are always on a single line. Fields are tab separated.","title":"Log Output"},{"location":"log/#log-levels","text":"Logger has eight log level severities based on PSR Log Levels . $logger->debug('Detailed information about the application run.'); $logger->info('Informational messages about the application run.'); $logger->notice('Normal but significant events.'); $logger->warning('Information that something potentially bad has occured.'); $logger->error('Runtime error that should be monitored.'); $logger->critical('A service is unavailable or unresponsive.'); $logger->alert('The entire site is down.'); $logger->emergency('The Web site is on fire.'); By default all log levels are logged. The minimum log level can be changed in two ways: * Optional constructor parameter * Setter method at any time use Solital\\Core\\Resource\\Logger; use Psr\\Log\\LogLevel; // Optional constructor Parameter (Only error and above are logged [error, critical, alert, emergency]) $logger = new Logger($logfile, $channel, LogLevel::ERROR); // Setter method (Only warning and above are logged) $logger->setLogLevel(LogLevel::WARNING);","title":"Log Levels"},{"location":"log/#contextual-data","text":"Logger enables logging best practices to have general-use log messages with contextual support data to give context to the message. The second argument to a log message is an associative array of key-value pairs that will log as a JSON string, serving as the contextual support data to the log message. // Add context to a Web request. $log->info('Web request initiated', ['method' => 'GET', 'endpoint' => 'user/account', 'queryParameters' => 'id=1234']); // Add context to a disk space warning. $log->warning('Free space is below safe threshold.', ['volume' => '/var/log', 'availablePercent' => 4]);","title":"Contextual Data"},{"location":"log/#logging-exceptions","text":"Exceptions are logged with the contextual data using the key exception and the value the exception variable. catch (\\Exception $e) { $logger->error('Something exceptional has happened', ['exception' => $e]); }","title":"Logging Exceptions"},{"location":"log/#log-channels","text":"Think of channels as namespaces for log lines. If you want to have multiple loggers or applications logging to a single log file, channels are your friend. Channels can be set in two ways: * Constructor parameter * Setter method at any time use Solital\\Core\\Resource\\Logger; // Constructor Parameter $channel = 'router'; $logger = new Logger($logfile, $channel); // Setter method $logger->setChannel('database');","title":"Log Channels"},{"location":"log/#debug-features","text":"","title":"Debug Features"},{"location":"log/#logging-to-stdout","text":"When developing, you can turn on log output to the screen (STDOUT) as a convenience. $logger->setOutput(true); $logger->debug('This will get logged to STDOUT as well as the log file.');","title":"Logging to STDOUT"},{"location":"log/#dummy-logger","text":"Suppose you need a logger to meet an injected dependency during a unit test, and you don't want it to actually log anything. You can set the log level to Logger::LOG_LEVEL_NONE which won't log at any level. use Solital\\Core\\Resource\\Logger; $logger->setLogLevel(Logger::LOG_LEVEL_NONE); $logger->info('This will not log to a file.');","title":"Dummy Logger"},{"location":"mail/","text":"Native Mail Mail is a class of Solital that uses PHP's native mail to send email. Use The sitaxis below is used to be able to send basic e-mail. use Solital\\Core\\Resource\\Mail\\NativeMail; NativeMail::send(\"your_sender@email.com\", \"your_recipient@email.com\", \"your_subject\", \"your_message\"); Optional parameters To add a reply, text type, charset and priority, use the optional parameters. NativeMail::send(\"your_sender@email.com\", \"your_recipient@email.com\", \"your_subject\", \"your_message\", \"your_reply@email.com\", \"type_text\", \"your_charset\", your_priority); Optional parameters have the following values by default: Reply to: (string) null Type: (string) text/plan Charset: (string) UTF-8 Priority: (int) 3 PHP Mailer Use To use PHP Mailer, edit the variables in .env with the information from your email server. # PHPMAILER CONFIG PHPMAILER_DEBUG=\"0\" PHPMAILER_HOST=\"mail.yourhost.com\" PHPMAILER_USER=\"email@your_email.com\" PHPMAILER_PASS=\"your_password\" PHPMAILER_SECURITY=\"tls\" PHPMAILER_PORT=\"587\" The code below shows the use of the PHPMailerClass class: use Solital\\Core\\Resource\\Mail\\PHPMailerClass; $mailer = new PHPMailerClass(); // Add sender and recipient information $mailer->add('sender_email@gmail.com', 'Sender name', 'recipient_email@gmail.com', 'Recipient name'); // Send a file by email (OPTIONAL) $mailer->attach('image.png', 'image_name'); // Send an image in HTML (OPTIONAL) $mailer->embeddedImage('image.png', 'image', 'image'); // Send email $mailer->send('E-mail test', '<h1>E-mail test</h1><p>cid:image</p>'); // If there is an error if ($mailer->error()) { echo $mailer->error(); }","title":"Mail"},{"location":"mail/#native-mail","text":"Mail is a class of Solital that uses PHP's native mail to send email.","title":"Native Mail"},{"location":"mail/#use","text":"The sitaxis below is used to be able to send basic e-mail. use Solital\\Core\\Resource\\Mail\\NativeMail; NativeMail::send(\"your_sender@email.com\", \"your_recipient@email.com\", \"your_subject\", \"your_message\");","title":"Use"},{"location":"mail/#optional-parameters","text":"To add a reply, text type, charset and priority, use the optional parameters. NativeMail::send(\"your_sender@email.com\", \"your_recipient@email.com\", \"your_subject\", \"your_message\", \"your_reply@email.com\", \"type_text\", \"your_charset\", your_priority); Optional parameters have the following values by default: Reply to: (string) null Type: (string) text/plan Charset: (string) UTF-8 Priority: (int) 3","title":"Optional parameters"},{"location":"mail/#php-mailer","text":"","title":"PHP Mailer"},{"location":"mail/#use_1","text":"To use PHP Mailer, edit the variables in .env with the information from your email server. # PHPMAILER CONFIG PHPMAILER_DEBUG=\"0\" PHPMAILER_HOST=\"mail.yourhost.com\" PHPMAILER_USER=\"email@your_email.com\" PHPMAILER_PASS=\"your_password\" PHPMAILER_SECURITY=\"tls\" PHPMAILER_PORT=\"587\" The code below shows the use of the PHPMailerClass class: use Solital\\Core\\Resource\\Mail\\PHPMailerClass; $mailer = new PHPMailerClass(); // Add sender and recipient information $mailer->add('sender_email@gmail.com', 'Sender name', 'recipient_email@gmail.com', 'Recipient name'); // Send a file by email (OPTIONAL) $mailer->attach('image.png', 'image_name'); // Send an image in HTML (OPTIONAL) $mailer->embeddedImage('image.png', 'image', 'image'); // Send email $mailer->send('E-mail test', '<h1>E-mail test</h1><p>cid:image</p>'); // If there is an error if ($mailer->error()) { echo $mailer->error(); }","title":"Use"},{"location":"messages/","text":"Message is a component for displaying alerts in views rendered with Wolf Template. With it, it is possible to display a message of success, error or any other type of message. By default, this class is already instantiated in the Controller class. NOTE: if you do not extend the Controller class, you will need to instantiate the Message class. use Solital\\Core\\Resource\\Message; $message = new Message(); How to use It is possible to create a new message like this: /** * @return void */ public function generate(): void { $this->message->new('msg.test', 'Just a test message displayed in the view!'); } To retrieve this message, use the get method inside your controller. /** * @return void */ public function home(): void { echo $this->message->get('msg.test'); } Using in Wolf Template To make use of this component in Wolf, the method of creating the message is exactly the same. The code represents a practical and recommended method of retrieving the message. <?php namespace Solital\\Components\\Controller; use Solital\\Components\\Controller\\Controller; use Solital\\Core\\Wolf\\Wolf; class UserController extends Controller { /** * Construct */ public function __construct() { parent::_construct(); } /** * @return void */ public function home(): void { Wolf::loadView('home', [ 'msg' => $this->message->get('msg.test') ]); } /** * @return void */ public function generate(): void { $this->message->new('msg.test', 'Just a test message displayed in the view!'); } In your view, display the message this way: <div> <?php if($msg): ?> <p><?= $msg ?></p> <?php endif; ?> </div>","title":"View Alerts"},{"location":"messages/#how-to-use","text":"It is possible to create a new message like this: /** * @return void */ public function generate(): void { $this->message->new('msg.test', 'Just a test message displayed in the view!'); } To retrieve this message, use the get method inside your controller. /** * @return void */ public function home(): void { echo $this->message->get('msg.test'); }","title":"How to use"},{"location":"messages/#using-in-wolf-template","text":"To make use of this component in Wolf, the method of creating the message is exactly the same. The code represents a practical and recommended method of retrieving the message. <?php namespace Solital\\Components\\Controller; use Solital\\Components\\Controller\\Controller; use Solital\\Core\\Wolf\\Wolf; class UserController extends Controller { /** * Construct */ public function __construct() { parent::_construct(); } /** * @return void */ public function home(): void { Wolf::loadView('home', [ 'msg' => $this->message->get('msg.test') ]); } /** * @return void */ public function generate(): void { $this->message->new('msg.test', 'Just a test message displayed in the view!'); } In your view, display the message this way: <div> <?php if($msg): ?> <p><?= $msg ?></p> <?php endif; ?> </div>","title":"Using in Wolf Template"},{"location":"routes/","text":"Basic routing Below is a very basic example of setting up a route. First parameter is the url which the route should match - next parameter is a Closure or callback function that will be triggered once the route matches. Course::get('/', function() { return 'Hello world'; }); Available methods Here you can see a list over all available routes: Course::get($url, $callback, $settings); Course::post($url, $callback, $settings); Course::put($url, $callback, $settings); Course::patch($url, $callback, $settings); Course::delete($url, $callback, $settings); Course::options($url, $callback, $settings); Multiple HTTP-verbs Sometimes you might need to create a route that accepts multiple HTTP-verbs. If you need to match all HTTP-verbs you can use the any method. Course::match(['get', 'post'], '/', function() { // ... }); Course::any('foo', function() { // ... }); We've created a simple method which matches GET and POST which is most commonly used: Course::form('foo', function() { // ... }); Default Base Path This will allows users to set a default basepath for all url requests, which will be prepended to all url parameters. (Credits to MasterPuffin ) Course::setDefaultBasepath('/forum') Route parameters Required parameters You'll properly wondering by know how you parse parameters from your urls. For example, you might want to capture the users id from an url. You can do so by defining route-parameters. Course::get('/user/{id}', function ($userId) { return 'User with id: ' . $userId; }); You may define as many route parameters as required by your route: Course::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) { // ... }); Note: Route parameters are always encased within {} braces and should consist of alphabetic characters. Route parameters may not contain a - character. Use an underscore _ instead. Optional parameters Occasionally you may need to specify a route parameter, but make the presence of that route parameter optional. You may do so by placing a ? mark after the parameter name. Make sure to give the route's corresponding variable a default value: Course::get('/user/{name?}', function ($name = null) { return $name; }); Course::get('/user/{name?}', function ($name = 'Simon') { return $name; }); Regular expression constraints You may constrain the format of your route parameters using the where method on a route instance. The where method accepts the name of the parameter and a regular expression defining how the parameter should be constrained: Course::get('/user/{name}', function ($name) { // ... do stuff })->where('name', '[A-Za-z]+'); Course::get('/user/{id}', function ($id) { // ... do stuff })->where('id', '[0-9]+'); Course::get('/user/{id}/{name}', function ($id, $name) { // ... do stuff })->where(['id' => '[0-9]+', 'name' => '[a-z]+']); Regular expression route-match You can define a regular-expression match for the entire route if you wish. This is useful if you for example are creating a model-box which loads urls from ajax. The example below is using the following regular expression: /ajax/([\\w]+)/?([0-9]+)?/? which basically just matches /ajax/ and exspects the next parameter to be a string - and the next to be a number (but optional). Matches: /ajax/abc/ , /ajax/abc/123/ Won't match: /ajax/ Match groups specified in the regex will be passed on as parameters: Course::all('/ajax/abc/123', function($param1, $param2) { // param1 = abc // param2 = 123 })->setMatch('/\\/ajax\\/([\\w]+)\\/?([0-9]+)?\\/?/is'); Custom regex for matching parameters By default Solital uses the \\w regular expression when matching parameters. This decision was made with speed and reliability in mind, as this match will match both letters, number and most of the used symbols on the internet. However, sometimes it can be necessary to add a custom regular expression to match more advanced characters like - etc. Instead of adding a custom regular expression to all your parameters, you can simply add a global regular expression which will be used on all the parameters on the route. Note: If you the regular expression to be available across, we recommend using the global parameter on a group as demonstrated in the examples below. Example This example will ensure that all parameters use the [\\w\\-]+ regular expression when parsing. Course::get('/path/{parameter}', 'VideoController@home', ['defaultParameterRegex' => '[\\w\\-]+']); You can also apply this setting to a group if you need multiple routes to use your custom regular expression when parsing parameters. Course::group(['defaultParameterRegex' => '[\\w\\-]+'], function() { Course::get('/path/{parameter}', 'VideoController@home'); }); Named routes Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the name method onto the route definition: Course::get('/user/profile', function () { // Your code here })->name('profile'); You can also specify names for Controller-actions: Course::get('/user/profile', 'UserController@profile')->name('profile'); Generating URLs To Named Routes Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via the global url helper-function (see helpers section): // Generating URLs... $url = url('profile'); If the named route defines parameters, you may pass the parameters as the second argument to the url function. The given parameters will automatically be inserted into the URL in their correct positions: Course::get('/user/{id}/profile', function ($id) { // })->name('profile'); $url = url('profile', ['id' => 1]); For more information on urls, please see the Urls section. Router groups Route groups allow you to share route attributes, such as middleware or namespaces, across a large number of routes without needing to define those attributes on each individual route. Shared attributes are specified in an array format as the first parameter to the Course::group method. Middleware To assign middleware to all routes within a group, you may use the middleware key in the group attribute array. Middleware are executed in the order they are listed in the array: Course::group(['prefix' => '/admin', 'middleware' => '\\Solital\\Components\\Controller\\UserController'], function () { Course::get(\"/login\", \"UserController@login\")->name('login'); Course::put(\"/logout\", \"UserController@logout\")->name('logout'); }); Or otherwise: Course::match(['get', 'post'], '/user/login', 'UserController@login')->addMiddleware('\\Solital\\Components\\Controller\\UserController:guest'); Namespaces Solital already has the default namespace to search for controllers ( Solital\\Components\\Controller ) Note Group namespaces will only be added to routes with relative callbacks. For example if your route has an absolute callback like UserController@home , the namespace from the route will not be prepended. To fix this you can make the callback relative by removing the \\ in the beginning of the callback. Course::group(['namespace' => 'Admin'], function () { // Controllers Within The \"App\\Http\\Controllers\\Admin\" Namespace }); Subdomain-routing Route groups may also be used to handle sub-domain routing. Sub-domains may be assigned route parameters just like route urls, allowing you to capture a portion of the sub-domain for usage in your route or controller. The sub-domain may be specified using the domain key on the group attribute array: Course::group(['domain' => '{account}.myapp.com'], function () { Course::get('/user/{id}', function ($account, $id) { // }); }); Route prefixes The prefix group attribute may be used to prefix each route in the group with a given url. For example, you may want to prefix all route urls within the group with admin : Course::group(['prefix' => '/admin'], function () { Course::get('/users', function () { // Matches The \"/admin/users\" URL }); }); Partial groups Partial router groups has the same benefits as a normal group, but supports parameters and are only rendered once the url has matched. This can be extremely useful in situations, where you only want special routes to be added, when a certain criteria or logic has been met. NOTE: Use partial groups with caution as routes added within are only rendered and available once the url of the partial-group has matched. This can cause url() not to find urls for the routes added within. Example: Course::partialGroup('/admin/{applicationId}', function ($applicationId) { Course::get('/', function($applicationId) { // Matches The \"/admin/applicationId\" URL }); }); Exception ExceptionHandler are classes that handles all exceptions. ExceptionsHandlers must implement the ExceptionHandlerInterface interface. Error route If a given route does not exist in your routers.php file, you can redirect to another route instead of displaying the route not found error using the error() method. If true , the redirection will be done. If false , you will not be redirected. Course::error(true, '/error'); Course::get('/error', function () { echo 'error 404'; }); URL Rewriting Changing current route Sometimes it can be useful to manipulate the route about to be loaded. Solital allows you to easily manipulate and change the routes which are about to be rendered. All information about the current route is stored in the \\Solital\\Core\\Course\\Router instance's loadedRoute property. For easy access you can use the shortcut helper function request() instead of calling the class directly \\Solital\\Core\\Course\\Course::router() . request()->setRewriteCallback('Example\\MyCustomClass@hello'); // -- or you can rewrite by url -- request()->setRewriteUrl('/my-rewrite-url'); Bootmanager: loading routes dynamically Sometimes it can be necessary to keep urls stored in the database, file or similar. In this example, we want the url /my-cat-is-beatiful to load the route /article/view/1 which the router knows, because it's defined in the routes.php file. To interfere with the router, we create a class that implements the RouterBootManagerInterface interface. This class will be loaded before any other rules in routes.php and allow us to \"change\" the current route, if any of our criteria are fulfilled (like coming from the url /my-cat-is-beatiful ). use Solital\\Core\\Http\\Request; use Solital\\Core\\Course\\RouterBootManagerInterface; use Solital\\Core\\Course\\Router; class CustomRouterRules implements RouterBootManagerInterface { /** * Called when router is booting and before the routes is loaded. * * @param \\Solital\\Core\\Course\\Router $router * @param \\Solital\\Core\\Http\\Request $request */ public function boot(\\Solital\\Core\\Course\\Router $router, \\Solital\\Core\\Http\\Request $request): void { $rewriteRules = [ '/my-cat-is-beatiful' => '/article/view/1', '/horses-are-great' => '/article/view/2', ]; foreach($rewriteRules as $url => $rule) { // If the current url matches the rewrite url, we use our custom route if($request->getUri()->getPath() === $url) { $request->setRewriteUrl($rule); } } } } The above should be pretty self-explanatory and can easily be changed to loop through urls store in the database, file or cache. What happens is that if the current route matches the route defined in the index of our $rewriteRules array, we set the route to the array value instead. By doing this the route will now load the url /article/view/1 instead of /my-cat-is-beatiful . The last thing we need to do, is to add our custom boot-manager to the routes.php file. You can create as many bootmanagers as you like and easily add them in your routes.php file. Course::addBootManager(new CustomRouterRules()); Adding routes manually The Course class referenced in the previous example, is just a simple helper class that knows how to communicate with the Router class. If you are up for a challenge, want the full control or simply just want to create your own Router helper class, this example is for you. use \\Solital\\Core\\Course\\Router; use \\Solital\\Core\\Course\\Route\\RouteUrl; /* Create new Router instance */ $router = new Router(); $route = new RouteUrl('/answer/1', function() { die('this callback will match /answer/1'); }); $route->addMiddleware(\\Demo\\Middlewares\\AuthMiddleware::class); $route->setNamespace('\\Demo\\Controllers'); $route->setPrefix('v1'); /* Add the route to the router */ $router->addRoute($route); Extending This is a simple example of an integration into a framework. The framework has it's own Router class which inherits from the Course class. This allows the framework to add custom functionality like loading a custom routes.php file or add debugging information etc. namespace Demo; use Solital\\Core\\Course\\Course; class Router extends Course { public static function start() { // change default namespace for all routes parent::setDefaultNamespace('\\Demo\\Controllers'); // change this to whatever makes sense in your project require_once 'routes.php'; // Do initial stuff parent::start(); } } Form Method Spoofing HTML forms do not support PUT , PATCH or DELETE actions. Therefore, when defining the PUT , PATCH or DELETE routes that are called from an HTML form, you will need to use the spoofing helper to add a hidden _method field to the form. The value sent with the _method field will be used as the HTTP request method: <form method=\"post\" action=\"<?= url(); ?>\"> <?= spoofing('put'); ?> <!-- other input elements here --> </form> Accessing The Current Route You can access information about the current route loaded by using the following method: Course::request()->getLoadedRoute(); request()->getLoadedRoute(); Other examples You can find many other examples in the sample file below: <?php use Solital\\Core\\Course\\Course; /* Adding custom csrfVerifier here */ Course::csrfVerifier(new \\Demo\\Middlewares\\CsrfVerifier()); Course::group(['middleware' => \\Demo\\Middlewares\\Site::class, 'exceptionHandler' => \\Demo\\Handlers\\CustomExceptionHandler::class], function() { Course::get('/answers/{id}', 'ControllerAnswers@show', ['where' => ['id' => '[0-9]+']]); /** * Restful resource (see IRestController interface for available methods) */ Course::resource('/rest', ControllerRessource::class); /** * Load the entire controller (where url matches method names - getIndex(), postIndex(), putIndex()). * The url paths will determine which method to render. * * For example: * * GET /animals => getIndex() * GET /animals/view => getView() * POST /animals/save => postSave() * * etc. */ Course::controller('/animals', ControllerAnimals::class); }); Course::get('/page/404', 'ControllerPage@notFound', ['as' => 'page.notfound']);","title":"Routes"},{"location":"routes/#basic-routing","text":"Below is a very basic example of setting up a route. First parameter is the url which the route should match - next parameter is a Closure or callback function that will be triggered once the route matches. Course::get('/', function() { return 'Hello world'; });","title":"Basic routing"},{"location":"routes/#available-methods","text":"Here you can see a list over all available routes: Course::get($url, $callback, $settings); Course::post($url, $callback, $settings); Course::put($url, $callback, $settings); Course::patch($url, $callback, $settings); Course::delete($url, $callback, $settings); Course::options($url, $callback, $settings);","title":"Available methods"},{"location":"routes/#multiple-http-verbs","text":"Sometimes you might need to create a route that accepts multiple HTTP-verbs. If you need to match all HTTP-verbs you can use the any method. Course::match(['get', 'post'], '/', function() { // ... }); Course::any('foo', function() { // ... }); We've created a simple method which matches GET and POST which is most commonly used: Course::form('foo', function() { // ... });","title":"Multiple HTTP-verbs"},{"location":"routes/#default-base-path","text":"This will allows users to set a default basepath for all url requests, which will be prepended to all url parameters. (Credits to MasterPuffin ) Course::setDefaultBasepath('/forum')","title":"Default Base Path"},{"location":"routes/#route-parameters","text":"","title":"Route parameters"},{"location":"routes/#required-parameters","text":"You'll properly wondering by know how you parse parameters from your urls. For example, you might want to capture the users id from an url. You can do so by defining route-parameters. Course::get('/user/{id}', function ($userId) { return 'User with id: ' . $userId; }); You may define as many route parameters as required by your route: Course::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) { // ... }); Note: Route parameters are always encased within {} braces and should consist of alphabetic characters. Route parameters may not contain a - character. Use an underscore _ instead.","title":"Required parameters"},{"location":"routes/#optional-parameters","text":"Occasionally you may need to specify a route parameter, but make the presence of that route parameter optional. You may do so by placing a ? mark after the parameter name. Make sure to give the route's corresponding variable a default value: Course::get('/user/{name?}', function ($name = null) { return $name; }); Course::get('/user/{name?}', function ($name = 'Simon') { return $name; });","title":"Optional parameters"},{"location":"routes/#regular-expression-constraints","text":"You may constrain the format of your route parameters using the where method on a route instance. The where method accepts the name of the parameter and a regular expression defining how the parameter should be constrained: Course::get('/user/{name}', function ($name) { // ... do stuff })->where('name', '[A-Za-z]+'); Course::get('/user/{id}', function ($id) { // ... do stuff })->where('id', '[0-9]+'); Course::get('/user/{id}/{name}', function ($id, $name) { // ... do stuff })->where(['id' => '[0-9]+', 'name' => '[a-z]+']);","title":"Regular expression constraints"},{"location":"routes/#regular-expression-route-match","text":"You can define a regular-expression match for the entire route if you wish. This is useful if you for example are creating a model-box which loads urls from ajax. The example below is using the following regular expression: /ajax/([\\w]+)/?([0-9]+)?/? which basically just matches /ajax/ and exspects the next parameter to be a string - and the next to be a number (but optional). Matches: /ajax/abc/ , /ajax/abc/123/ Won't match: /ajax/ Match groups specified in the regex will be passed on as parameters: Course::all('/ajax/abc/123', function($param1, $param2) { // param1 = abc // param2 = 123 })->setMatch('/\\/ajax\\/([\\w]+)\\/?([0-9]+)?\\/?/is');","title":"Regular expression route-match"},{"location":"routes/#custom-regex-for-matching-parameters","text":"By default Solital uses the \\w regular expression when matching parameters. This decision was made with speed and reliability in mind, as this match will match both letters, number and most of the used symbols on the internet. However, sometimes it can be necessary to add a custom regular expression to match more advanced characters like - etc. Instead of adding a custom regular expression to all your parameters, you can simply add a global regular expression which will be used on all the parameters on the route. Note: If you the regular expression to be available across, we recommend using the global parameter on a group as demonstrated in the examples below.","title":"Custom regex for matching parameters"},{"location":"routes/#example","text":"This example will ensure that all parameters use the [\\w\\-]+ regular expression when parsing. Course::get('/path/{parameter}', 'VideoController@home', ['defaultParameterRegex' => '[\\w\\-]+']); You can also apply this setting to a group if you need multiple routes to use your custom regular expression when parsing parameters. Course::group(['defaultParameterRegex' => '[\\w\\-]+'], function() { Course::get('/path/{parameter}', 'VideoController@home'); });","title":"Example"},{"location":"routes/#named-routes","text":"Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the name method onto the route definition: Course::get('/user/profile', function () { // Your code here })->name('profile'); You can also specify names for Controller-actions: Course::get('/user/profile', 'UserController@profile')->name('profile');","title":"Named routes"},{"location":"routes/#generating-urls-to-named-routes","text":"Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via the global url helper-function (see helpers section): // Generating URLs... $url = url('profile'); If the named route defines parameters, you may pass the parameters as the second argument to the url function. The given parameters will automatically be inserted into the URL in their correct positions: Course::get('/user/{id}/profile', function ($id) { // })->name('profile'); $url = url('profile', ['id' => 1]); For more information on urls, please see the Urls section.","title":"Generating URLs To Named Routes"},{"location":"routes/#router-groups","text":"Route groups allow you to share route attributes, such as middleware or namespaces, across a large number of routes without needing to define those attributes on each individual route. Shared attributes are specified in an array format as the first parameter to the Course::group method.","title":"Router groups"},{"location":"routes/#middleware","text":"To assign middleware to all routes within a group, you may use the middleware key in the group attribute array. Middleware are executed in the order they are listed in the array: Course::group(['prefix' => '/admin', 'middleware' => '\\Solital\\Components\\Controller\\UserController'], function () { Course::get(\"/login\", \"UserController@login\")->name('login'); Course::put(\"/logout\", \"UserController@logout\")->name('logout'); }); Or otherwise: Course::match(['get', 'post'], '/user/login', 'UserController@login')->addMiddleware('\\Solital\\Components\\Controller\\UserController:guest');","title":"Middleware"},{"location":"routes/#namespaces","text":"Solital already has the default namespace to search for controllers ( Solital\\Components\\Controller )","title":"Namespaces"},{"location":"routes/#note","text":"Group namespaces will only be added to routes with relative callbacks. For example if your route has an absolute callback like UserController@home , the namespace from the route will not be prepended. To fix this you can make the callback relative by removing the \\ in the beginning of the callback. Course::group(['namespace' => 'Admin'], function () { // Controllers Within The \"App\\Http\\Controllers\\Admin\" Namespace });","title":"Note"},{"location":"routes/#subdomain-routing","text":"Route groups may also be used to handle sub-domain routing. Sub-domains may be assigned route parameters just like route urls, allowing you to capture a portion of the sub-domain for usage in your route or controller. The sub-domain may be specified using the domain key on the group attribute array: Course::group(['domain' => '{account}.myapp.com'], function () { Course::get('/user/{id}', function ($account, $id) { // }); });","title":"Subdomain-routing"},{"location":"routes/#route-prefixes","text":"The prefix group attribute may be used to prefix each route in the group with a given url. For example, you may want to prefix all route urls within the group with admin : Course::group(['prefix' => '/admin'], function () { Course::get('/users', function () { // Matches The \"/admin/users\" URL }); });","title":"Route prefixes"},{"location":"routes/#partial-groups","text":"Partial router groups has the same benefits as a normal group, but supports parameters and are only rendered once the url has matched. This can be extremely useful in situations, where you only want special routes to be added, when a certain criteria or logic has been met. NOTE: Use partial groups with caution as routes added within are only rendered and available once the url of the partial-group has matched. This can cause url() not to find urls for the routes added within. Example: Course::partialGroup('/admin/{applicationId}', function ($applicationId) { Course::get('/', function($applicationId) { // Matches The \"/admin/applicationId\" URL }); });","title":"Partial groups"},{"location":"routes/#exception","text":"ExceptionHandler are classes that handles all exceptions. ExceptionsHandlers must implement the ExceptionHandlerInterface interface.","title":"Exception"},{"location":"routes/#error-route","text":"If a given route does not exist in your routers.php file, you can redirect to another route instead of displaying the route not found error using the error() method. If true , the redirection will be done. If false , you will not be redirected. Course::error(true, '/error'); Course::get('/error', function () { echo 'error 404'; });","title":"Error route"},{"location":"routes/#url-rewriting","text":"","title":"URL Rewriting"},{"location":"routes/#changing-current-route","text":"Sometimes it can be useful to manipulate the route about to be loaded. Solital allows you to easily manipulate and change the routes which are about to be rendered. All information about the current route is stored in the \\Solital\\Core\\Course\\Router instance's loadedRoute property. For easy access you can use the shortcut helper function request() instead of calling the class directly \\Solital\\Core\\Course\\Course::router() . request()->setRewriteCallback('Example\\MyCustomClass@hello'); // -- or you can rewrite by url -- request()->setRewriteUrl('/my-rewrite-url');","title":"Changing current route"},{"location":"routes/#bootmanager-loading-routes-dynamically","text":"Sometimes it can be necessary to keep urls stored in the database, file or similar. In this example, we want the url /my-cat-is-beatiful to load the route /article/view/1 which the router knows, because it's defined in the routes.php file. To interfere with the router, we create a class that implements the RouterBootManagerInterface interface. This class will be loaded before any other rules in routes.php and allow us to \"change\" the current route, if any of our criteria are fulfilled (like coming from the url /my-cat-is-beatiful ). use Solital\\Core\\Http\\Request; use Solital\\Core\\Course\\RouterBootManagerInterface; use Solital\\Core\\Course\\Router; class CustomRouterRules implements RouterBootManagerInterface { /** * Called when router is booting and before the routes is loaded. * * @param \\Solital\\Core\\Course\\Router $router * @param \\Solital\\Core\\Http\\Request $request */ public function boot(\\Solital\\Core\\Course\\Router $router, \\Solital\\Core\\Http\\Request $request): void { $rewriteRules = [ '/my-cat-is-beatiful' => '/article/view/1', '/horses-are-great' => '/article/view/2', ]; foreach($rewriteRules as $url => $rule) { // If the current url matches the rewrite url, we use our custom route if($request->getUri()->getPath() === $url) { $request->setRewriteUrl($rule); } } } } The above should be pretty self-explanatory and can easily be changed to loop through urls store in the database, file or cache. What happens is that if the current route matches the route defined in the index of our $rewriteRules array, we set the route to the array value instead. By doing this the route will now load the url /article/view/1 instead of /my-cat-is-beatiful . The last thing we need to do, is to add our custom boot-manager to the routes.php file. You can create as many bootmanagers as you like and easily add them in your routes.php file. Course::addBootManager(new CustomRouterRules());","title":"Bootmanager: loading routes dynamically"},{"location":"routes/#adding-routes-manually","text":"The Course class referenced in the previous example, is just a simple helper class that knows how to communicate with the Router class. If you are up for a challenge, want the full control or simply just want to create your own Router helper class, this example is for you. use \\Solital\\Core\\Course\\Router; use \\Solital\\Core\\Course\\Route\\RouteUrl; /* Create new Router instance */ $router = new Router(); $route = new RouteUrl('/answer/1', function() { die('this callback will match /answer/1'); }); $route->addMiddleware(\\Demo\\Middlewares\\AuthMiddleware::class); $route->setNamespace('\\Demo\\Controllers'); $route->setPrefix('v1'); /* Add the route to the router */ $router->addRoute($route);","title":"Adding routes manually"},{"location":"routes/#extending","text":"This is a simple example of an integration into a framework. The framework has it's own Router class which inherits from the Course class. This allows the framework to add custom functionality like loading a custom routes.php file or add debugging information etc. namespace Demo; use Solital\\Core\\Course\\Course; class Router extends Course { public static function start() { // change default namespace for all routes parent::setDefaultNamespace('\\Demo\\Controllers'); // change this to whatever makes sense in your project require_once 'routes.php'; // Do initial stuff parent::start(); } }","title":"Extending"},{"location":"routes/#form-method-spoofing","text":"HTML forms do not support PUT , PATCH or DELETE actions. Therefore, when defining the PUT , PATCH or DELETE routes that are called from an HTML form, you will need to use the spoofing helper to add a hidden _method field to the form. The value sent with the _method field will be used as the HTTP request method: <form method=\"post\" action=\"<?= url(); ?>\"> <?= spoofing('put'); ?> <!-- other input elements here --> </form>","title":"Form Method Spoofing"},{"location":"routes/#accessing-the-current-route","text":"You can access information about the current route loaded by using the following method: Course::request()->getLoadedRoute(); request()->getLoadedRoute();","title":"Accessing The Current Route"},{"location":"routes/#other-examples","text":"You can find many other examples in the sample file below: <?php use Solital\\Core\\Course\\Course; /* Adding custom csrfVerifier here */ Course::csrfVerifier(new \\Demo\\Middlewares\\CsrfVerifier()); Course::group(['middleware' => \\Demo\\Middlewares\\Site::class, 'exceptionHandler' => \\Demo\\Handlers\\CustomExceptionHandler::class], function() { Course::get('/answers/{id}', 'ControllerAnswers@show', ['where' => ['id' => '[0-9]+']]); /** * Restful resource (see IRestController interface for available methods) */ Course::resource('/rest', ControllerRessource::class); /** * Load the entire controller (where url matches method names - getIndex(), postIndex(), putIndex()). * The url paths will determine which method to render. * * For example: * * GET /animals => getIndex() * GET /animals/view => getView() * POST /animals/save => postSave() * * etc. */ Course::controller('/animals', ControllerAnimals::class); }); Course::get('/page/404', 'ControllerPage@notFound', ['as' => 'page.notfound']);","title":"Other examples"},{"location":"session-cookie/","text":"Create session and cookie The operation of the sessions and cookies are the same. To create a session, the first parameter reports the session index or the second value of it. use Solital\\Core\\Resource\\Session; Session::new('your_index', 'your_value'); And for Cookies. use Solital\\Core\\Resource\\Cookie; Cookie::new('your_index', 'your_value', 'time', 'path'); To create an array of values in a session, pass in the third parameter the name of the session index. Session::new('index', ['id' => 1, 'name' => 'hero'], 'second_index'); Display session and cookie To display a session and cookie, use a syntax below. Session::show('your_index'); Session::show('index', 'second_index'); Cookie::show('your_index'); Check session and cookie To check if a session or cookie exists, use a sintax below. Session::has('your_index'); Session::has('index', 'second_index'); Cookie::has('your_index'); Delete session and cookie To delete a session and cookie, use a syntax below. Session::delete('your_index'); Session::delete('index', 'second_index'); Cookie::delete('your_index', 'path');","title":"Session and Cookie"},{"location":"session-cookie/#create-session-and-cookie","text":"The operation of the sessions and cookies are the same. To create a session, the first parameter reports the session index or the second value of it. use Solital\\Core\\Resource\\Session; Session::new('your_index', 'your_value'); And for Cookies. use Solital\\Core\\Resource\\Cookie; Cookie::new('your_index', 'your_value', 'time', 'path'); To create an array of values in a session, pass in the third parameter the name of the session index. Session::new('index', ['id' => 1, 'name' => 'hero'], 'second_index');","title":"Create session and cookie"},{"location":"session-cookie/#display-session-and-cookie","text":"To display a session and cookie, use a syntax below. Session::show('your_index'); Session::show('index', 'second_index'); Cookie::show('your_index');","title":"Display session and cookie"},{"location":"session-cookie/#check-session-and-cookie","text":"To check if a session or cookie exists, use a sintax below. Session::has('your_index'); Session::has('index', 'second_index'); Cookie::has('your_index');","title":"Check session and cookie"},{"location":"session-cookie/#delete-session-and-cookie","text":"To delete a session and cookie, use a syntax below. Session::delete('your_index'); Session::delete('index', 'second_index'); Cookie::delete('your_index', 'path');","title":"Delete session and cookie"},{"location":"sql/","text":"You can create and remove tables, add a foreign key, add a column to the table, among other SQL commands using the SQL class and the Vinci Console. This class is found in the app/Database . <?php namespace Solital\\Database; use Solital\\Core\\Database\\Create\\Create; class SQL extends Create { /** * @return void */ public function tableExample(): void { $this->orm->createTable('table_test') ->int('id_table')->notNull() ->varchar('name', 100)->notNull() ->closeTable() ->build(); } } And in vinci, execute the method as follows: php vinci katrina:tableExample Cache of SQL commands For each run that is made, a cached file will be generated. This file is important if you want to keep a history of the commands that were executed. To find the directory of these cached files, go to the sql folder inside app/Storage/cache . NOTE: Whenever you clear the cache with the php vinci cache-clear command, the cached SQL files are also deleted. Default username and password You can create a standard database login table using the command php vinci katrina-auth . This command will insert a default email and password. To authenticate, use the email solital@email.com and password solital NOTE: When creating the login structure with the command php vinci katrina-auth , the method userAuth is executed automatically, it is not necessary to execute it later. Dump Database It is possible to create a backup of your entire database. First, make sure your .env file has the correct connection. On Windows By default, on Windows you need to run an exe file from your database. For this, you can add in the variables the path where this exe file is located: MYSQL_DUMP (For MySQL database) and PG_DUMP (For PostgreSQL database). # This is an example of a project using XAMPP. # The file \"mysqldump.exe\" is located in this directory. MYSQL_DUMP=\"C:\\\\xampp\\\\mysql\\\\bin\\\\mysqldump.exe\" Then, just run the php vinci katrina-dump command to dump the database. The created file will be saved to app/Storage/dump .","title":"Builder SQL"},{"location":"sql/#cache-of-sql-commands","text":"For each run that is made, a cached file will be generated. This file is important if you want to keep a history of the commands that were executed. To find the directory of these cached files, go to the sql folder inside app/Storage/cache . NOTE: Whenever you clear the cache with the php vinci cache-clear command, the cached SQL files are also deleted.","title":"Cache of SQL commands"},{"location":"sql/#default-username-and-password","text":"You can create a standard database login table using the command php vinci katrina-auth . This command will insert a default email and password. To authenticate, use the email solital@email.com and password solital NOTE: When creating the login structure with the command php vinci katrina-auth , the method userAuth is executed automatically, it is not necessary to execute it later.","title":"Default username and password"},{"location":"sql/#dump-database","text":"It is possible to create a backup of your entire database. First, make sure your .env file has the correct connection. On Windows By default, on Windows you need to run an exe file from your database. For this, you can add in the variables the path where this exe file is located: MYSQL_DUMP (For MySQL database) and PG_DUMP (For PostgreSQL database). # This is an example of a project using XAMPP. # The file \"mysqldump.exe\" is located in this directory. MYSQL_DUMP=\"C:\\\\xampp\\\\mysql\\\\bin\\\\mysqldump.exe\" Then, just run the php vinci katrina-dump command to dump the database. The created file will be saved to app/Storage/dump .","title":"Dump Database"},{"location":"validate/","text":"Validation You can validate email, string, array and others. Email $res = Valid::email('solital@email.com'); /* Return `string` if true or `null` if false */ pre($res); Number You can validate whether a number is int or float . $res = Valid::number(12.5); /* Return `int` or `float` if true or `null` if false */ pre($res); Null $res = Valid::isNull(null); /* Return bool */ pre($res); Lowercase You can validate a string if it is lowercase. If not, the isLower method will convert the string to lowercase. $res = Valid::isLower('SOLITAL'); /* Return string */ pre($res); Uppercase You can validate a string if it is uppercase. If not, the isUpper method will convert the string to uppercase. $res = Valid::isUpper('solital'); /* Return string */ pre($res); Base64 Checks whether a variable is Base64-type encryption. $hash = base64_encode(\"test\"); $res = Valid::isBase64($hash); /* Return bool */ pre($res); Identical Checks if one variable is identical to another. $res = Valid::identical(\"foo\", \"foo\"); /* Return bool */ pre($res);","title":"Validation"},{"location":"validate/#validation","text":"You can validate email, string, array and others.","title":"Validation"},{"location":"validate/#email","text":"$res = Valid::email('solital@email.com'); /* Return `string` if true or `null` if false */ pre($res);","title":"Email"},{"location":"validate/#number","text":"You can validate whether a number is int or float . $res = Valid::number(12.5); /* Return `int` or `float` if true or `null` if false */ pre($res);","title":"Number"},{"location":"validate/#null","text":"$res = Valid::isNull(null); /* Return bool */ pre($res);","title":"Null"},{"location":"validate/#lowercase","text":"You can validate a string if it is lowercase. If not, the isLower method will convert the string to lowercase. $res = Valid::isLower('SOLITAL'); /* Return string */ pre($res);","title":"Lowercase"},{"location":"validate/#uppercase","text":"You can validate a string if it is uppercase. If not, the isUpper method will convert the string to uppercase. $res = Valid::isUpper('solital'); /* Return string */ pre($res);","title":"Uppercase"},{"location":"validate/#base64","text":"Checks whether a variable is Base64-type encryption. $hash = base64_encode(\"test\"); $res = Valid::isBase64($hash); /* Return bool */ pre($res);","title":"Base64"},{"location":"validate/#identical","text":"Checks if one variable is identical to another. $res = Valid::identical(\"foo\", \"foo\"); /* Return bool */ pre($res);","title":"Identical"},{"location":"vinci/","text":"Vinci Console is an auxiliary component to help create files faster, such as login structures, password recovery structures, database configuration and more. Access Vinci To access Vinci, open the terminal in your project folder and type php vinci [command] . To access information about Solital and its dependencies, open your terminal inside your project folder and type php vinci version For Windows To run the Vinci console on Windows, remember to add the PHP directory to the Windows PATH. Create a component You can create a new component using the syntax below. php vinci [command]:[name_file] Example php vinci controller:UserController Command Description controller Creates a new controller model Create a new Model view Create a new view css Create a new CSS file js Create a new JavaScript file routes Creates a new file for the route system Remove a component Add the remove- command before using one of the aforementioned commands to remove a component created with Vinci. php vinci remove-controller:UserController System Commands To execute a command, use the following syntax: php vinci [command] Command Description cache-clear Clears the solital cache session-clear Clears the solital sessions login Create classes for login remove-login Removes the components created for login forgot Create classes for forgot password remove-forgot Removes the components created for forgot password - Katrina Commands Command Description katrina-version Check the Katrina ORM version katrina-auth Create a default user in the database katrina-dump Dump the database - You can view the complete list of Vinci commands using php vinci show . Custom Command To create a custom command, you can make use of the Custom Console class. This class is found inside the app/ folder For this, in the execute method, you must return the command to be typed in the array index, and in the index value the method that will be executed. /** * @return array */ public function execute(): array { return [ 'cmd-example' => 'tableExample' ]; } /** * @return CustomConsole */ public function tableExample(): CustomConsole { echo \"This command is just a custom command test on the Vinci Console!\\n\"; return $this; } You can test the predefined command in this class using php vinci cmd-example .","title":"Vinci Console"},{"location":"vinci/#access-vinci","text":"To access Vinci, open the terminal in your project folder and type php vinci [command] . To access information about Solital and its dependencies, open your terminal inside your project folder and type php vinci version","title":"Access Vinci"},{"location":"vinci/#for-windows","text":"To run the Vinci console on Windows, remember to add the PHP directory to the Windows PATH.","title":"For Windows"},{"location":"vinci/#create-a-component","text":"You can create a new component using the syntax below. php vinci [command]:[name_file] Example php vinci controller:UserController Command Description controller Creates a new controller model Create a new Model view Create a new view css Create a new CSS file js Create a new JavaScript file routes Creates a new file for the route system","title":"Create a component"},{"location":"vinci/#remove-a-component","text":"Add the remove- command before using one of the aforementioned commands to remove a component created with Vinci. php vinci remove-controller:UserController","title":"Remove a component"},{"location":"vinci/#system-commands","text":"To execute a command, use the following syntax: php vinci [command] Command Description cache-clear Clears the solital cache session-clear Clears the solital sessions login Create classes for login remove-login Removes the components created for login forgot Create classes for forgot password remove-forgot Removes the components created for forgot password -","title":"System Commands"},{"location":"vinci/#katrina-commands","text":"Command Description katrina-version Check the Katrina ORM version katrina-auth Create a default user in the database katrina-dump Dump the database - You can view the complete list of Vinci commands using php vinci show .","title":"Katrina Commands"},{"location":"vinci/#custom-command","text":"To create a custom command, you can make use of the Custom Console class. This class is found inside the app/ folder For this, in the execute method, you must return the command to be typed in the array index, and in the index value the method that will be executed. /** * @return array */ public function execute(): array { return [ 'cmd-example' => 'tableExample' ]; } /** * @return CustomConsole */ public function tableExample(): CustomConsole { echo \"This command is just a custom command test on the Vinci Console!\\n\"; return $this; } You can test the predefined command in this class using php vinci cmd-example .","title":"Custom Command"},{"location":"wolf/","text":"Wolf is Solital's standard template system. You can load any template into the resource/views folder Basic Below is the basic code to load any template: use Solital\\Core\\Wolf\\Wolf; Wolf::loadView('home'); Parameters The sitaxe below loads the parameters to be viewed in your template. Wolf::loadView('home', [ 'title' => 'My Title' ]); And in your home.php , retrieve the value informed in this way: <title>$title</title> Custom extensions Wolf will search for files in php format, but to search for a different format, use the last parameter. Wolf::loadView('home', [ 'title' => 'My Title' ], \"html\"); Loading CSS, JS and images Make sure the files exist in the folder public/assets/_css , public/assets/_js and public/assets/_img To load a CSS file, use the static loadCss method in your template. <link rel=\"stylesheet\" href=\"<?= loadCss('style.css'); ?>\"> To load a JS file, use the static loadJs method in your template. <link rel=\"stylesheet\" href=\"<?= loadJs('file.js'); ?>\"> To load a image file, use the static loadImg method in your template. <img src=\"<?= loadImg('image.png'); ?>\"> To load a file outside the _css , _js and _img folder, use the loadFile method. <img src=\"<?= loadFile('path/for/your/file'); ?>\"> Cache templates If you have a template that takes a long time to load, or is rarely accessed, consider creating a cache of that template. Wolf's cache works as follows: a page is loaded, then a page identical to the one that was loaded with all the data already saved in cache is created. When reloading, if this page is still valid, the page's cache will be displayed. The syntax below shows how long the template can be cached. # The template is cached for one minute Wolf::cache()->forOneMinute(); # The template is cached for an hour Wolf::cache()->forOneHour(); # The template is cached for a day Wolf::cache()->forOneDay(); # The template is cached for a week Wolf::cache()->forOneWeek(); Wolf::loadView('home', [ 'title' => 'My Title' ]); To create the cache for all templates, consider using this method in the controller constructor. <?php namespace Solital\\Components\\Controller; use Solital\\Components\\Controller\\Controller; class UserController extends Controller { /** * Construct */ public function __construct() { Wolf::cache()->forOneHour(); } /** * @return void */ public function home(): void { Wolf::loadView('home', [ 'title' => 'My Title' ]); } ## Other methods... } Minify Assets Having to load multiple CSS and Javascript files can be a lot of work and can be a burden on the site. However, you can minify all of these files into a single CSS and JS file. By default, assets are loaded into the public/assets/ folder. However, there is a second assets folder inside specific resource/ to minify the CSS/JS files. When placing files inside resources/assets/ , you can call the minify method. The code below shows the correct use of this method: # Minify only CSS files Wolf::minify()->style(); # Minify only Javascript files Wolf::minify()->script(); # Minify CSS and Javascript files Wolf::minify()->all(); Load minified files into the template The loadMinCss() and loadMinJs() functions will load all files that are minified, without having to use the loadCss() and loadJs() functions. # Load minify CSS <link rel=\"stylesheet\" href=\"<?= loadMinCss() ?>\"> # Load minify JS <script src=\"<?= loadMinJs() ?>\"><script>","title":"Wolf Template"},{"location":"wolf/#basic","text":"Below is the basic code to load any template: use Solital\\Core\\Wolf\\Wolf; Wolf::loadView('home');","title":"Basic"},{"location":"wolf/#parameters","text":"The sitaxe below loads the parameters to be viewed in your template. Wolf::loadView('home', [ 'title' => 'My Title' ]); And in your home.php , retrieve the value informed in this way: <title>$title</title>","title":"Parameters"},{"location":"wolf/#custom-extensions","text":"Wolf will search for files in php format, but to search for a different format, use the last parameter. Wolf::loadView('home', [ 'title' => 'My Title' ], \"html\");","title":"Custom extensions"},{"location":"wolf/#loading-css-js-and-images","text":"Make sure the files exist in the folder public/assets/_css , public/assets/_js and public/assets/_img To load a CSS file, use the static loadCss method in your template. <link rel=\"stylesheet\" href=\"<?= loadCss('style.css'); ?>\"> To load a JS file, use the static loadJs method in your template. <link rel=\"stylesheet\" href=\"<?= loadJs('file.js'); ?>\"> To load a image file, use the static loadImg method in your template. <img src=\"<?= loadImg('image.png'); ?>\"> To load a file outside the _css , _js and _img folder, use the loadFile method. <img src=\"<?= loadFile('path/for/your/file'); ?>\">","title":"Loading CSS, JS and images"},{"location":"wolf/#cache-templates","text":"If you have a template that takes a long time to load, or is rarely accessed, consider creating a cache of that template. Wolf's cache works as follows: a page is loaded, then a page identical to the one that was loaded with all the data already saved in cache is created. When reloading, if this page is still valid, the page's cache will be displayed. The syntax below shows how long the template can be cached. # The template is cached for one minute Wolf::cache()->forOneMinute(); # The template is cached for an hour Wolf::cache()->forOneHour(); # The template is cached for a day Wolf::cache()->forOneDay(); # The template is cached for a week Wolf::cache()->forOneWeek(); Wolf::loadView('home', [ 'title' => 'My Title' ]); To create the cache for all templates, consider using this method in the controller constructor. <?php namespace Solital\\Components\\Controller; use Solital\\Components\\Controller\\Controller; class UserController extends Controller { /** * Construct */ public function __construct() { Wolf::cache()->forOneHour(); } /** * @return void */ public function home(): void { Wolf::loadView('home', [ 'title' => 'My Title' ]); } ## Other methods... }","title":"Cache templates"},{"location":"wolf/#minify-assets","text":"Having to load multiple CSS and Javascript files can be a lot of work and can be a burden on the site. However, you can minify all of these files into a single CSS and JS file. By default, assets are loaded into the public/assets/ folder. However, there is a second assets folder inside specific resource/ to minify the CSS/JS files. When placing files inside resources/assets/ , you can call the minify method. The code below shows the correct use of this method: # Minify only CSS files Wolf::minify()->style(); # Minify only Javascript files Wolf::minify()->script(); # Minify CSS and Javascript files Wolf::minify()->all();","title":"Minify Assets"},{"location":"wolf/#load-minified-files-into-the-template","text":"The loadMinCss() and loadMinJs() functions will load all files that are minified, without having to use the loadCss() and loadJs() functions. # Load minify CSS <link rel=\"stylesheet\" href=\"<?= loadMinCss() ?>\"> # Load minify JS <script src=\"<?= loadMinJs() ?>\"><script>","title":"Load minified files into the template"}]}